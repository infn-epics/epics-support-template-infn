## Project       : Agilient m9210A
## Description   : Provides EPICS support for m9210A DAQ board
## Authors       : Vyacheslav Isaev <slava.isaev@cosylab.com>
##
## Copyright (c) 2015 Cosylab d.d.
# -------------------------------- [ Device ] --------------------------------
# Template file: m9210Device.template
#

record(mbbi, "$(PREFIX,undefined):STAT") {
	field(DESC, "The state of the device.")
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)State")
	field(ZRVL, "0")
	field(ZRST, "UNKNOWN")
	field(ONVL, "1")
	field(ONST, "IOCINIT")
	field(TWVL, "2")
	field(TWST, "OFF")
	field(THVL, "3")
	field(THST, "INIT")
	field(FRVL, "4")
	field(FRST, "ON")
	field(FVVL, "5")
	field(FVST, "ERROR")
	field(SXVL, "6")
	field(SXST, "FAULT")	
	field(SVVL, "7")
	field(SVST, "RESETTING")	
	field(SCAN, "I/O Intr")
}

record(waveform, "$(PREFIX,undefined):MSGS") {
	field(DESC, "Send message to device driver.")
	field(DTYP, "asynOctetWrite")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)Command")
	field(FTVL, "UCHAR")
	field(NELM, "255")
}

record(waveform, "$(PREFIX,undefined):MSGR") {
	field(DESC, "Receive message from device driver.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)Command")
	field(SCAN, "I/O Intr")	
	field(FTVL, "UCHAR")
	field(NELM, "255")
}

record(stringin, "$(PREFIX,undefined):IMDL") {
	field(DESC, "Model of the device.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)Model")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):ISN") {
	field(DESC, "Serial number of the device.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)Serial")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):IHW") {
	field(DESC, "Hardware revision of the device.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)HardwareRevision")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):IFW") {
	field(DESC, "Firmware version of the device.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)FirmwareVersion")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):ISW") {
	field(DESC, "Software version of the device driver.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)SoftwareVersion")
	field(SCAN, "I/O Intr")	
}

record(mbbi, "$(PREFIX,undefined):STS") {
	field(DESC, "The status of the device.")
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)ErrorCode")
	field(SCAN, "I/O Intr")	
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")
	field(FRVL, "4")
	field(FVVL, "5")
	field(SXVL, "6")
	field(SVVL, "7")
	field(EIVL, "8")
	field(NIVL, "9")
	field(TEVL, "10")
	field(ELVL, "11")
	field(TVVL, "12")
	field(TTVL, "13")
	field(FTVL, "14")
	field(FFVL, "15")
	field(ZRST, "No error")
	field(ONST, "Initializing")
	field(TWST, "Resetting")
	field(THST, "PBIT test failure")
	field(FRST, "No board detected")
	field(FVST, "Static cfg. error")
	field(SXST, "Dynamic cfg. error")
	field(SVST, "Idle")
	field(EIST, "Measuring")
	field(NIST, "WaitingForArm")
	field(TEST, "WaitingForTrigger")
	field(ELST, "Reserved")
	field(TVST, "Reserved")
	field(TTST, "Reserved")
	field(FTST, "Reserved")
	field(FFST, "Miscellaneous errors")
}

record(bo, "$(PREFIX,undefined):ENBL")
{
	field(DESC, "Device is enabled for automatic start.")
	field(DTYP, "asynInt32")
	field(OUT,"@asyn( $(ASYN_PORT,undefined), 0)Enabled")
	field(ZNAM	, "DISABLED")
	field(ONAM	, "ENABLED")
	field(VAL,  "1")
	field(PINI, "YES")
}

record(bi, "$(PREFIX,undefined):ENBL_RB")
{
	field(DESC, "Is device enabled for automatic start?")
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(INP,"@asyn( $(ASYN_PORT,undefined), 0)Enabled")
	field(ZNAM	, "DISABLED")
	field(ONAM	, "ENABLED")
	field(VAL,  "1")
#	field(PINI, "YES")
}

record(bo, "$(PREFIX,undefined):TRG_SP") {
	field(DESC, "Software trigger")
	field(DTYP, "asynInt32")
	field(OUT,	"@asyn($(ASYN_PORT,undefined), 0)Trigger")
	field(ZNAM, "NotTriggered")
	field(ONAM, "Triggered")
}

record(stringin, "$(PREFIX,undefined):TRGS_RB") {
	field(DESC, "Active trigger source")
	field(DTYP, "asynOctetRead")
	field(INP,	"@asyn($(ASYN_PORT,undefined), 0)ActiveTriggerSource")
	field(SCAN, "I/O Intr")
}

record(mbbi, "$(PREFIX,undefined):TRGT_RB") {
	field(DESC, "Active trigger type")
	field(DTYP, "asynInt32")
	field(INP,	"@asyn($(ASYN_PORT,undefined), 0)TriggerType")
	field(SCAN, "I/O Intr")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(THVL, "3")	
	field(ZRST, "EDGE")
	field(ONST, "TV")
	field(TWST, "IMMEDIATE")
	field(THST, "MAGNITUDE")
}

record(mbbi, "$(PREFIX,undefined):TRGC_RB") {
	field(DESC, "Active trigger coupling.")
	field(DTYP, "asynInt32")
	field(INP,	"@asyn($(ASYN_PORT,undefined), 0)TriggerCoupling")
	field(SCAN, "I/O Intr")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
	field(ZRST, "AC")
	field(ONST, "DC")
	field(TWST, "HF_REJECT")
}

record(ao, "$(PREFIX,undefined):TRGL_SP") {
	field(DESC, "Trigger level.")
	field(EGU,  "V")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(ASYN_PORT,undefined), 0)TriggerLevel")
	field(LOPR, "0.0")
	field(HOPR, "5.0")
	field(PINI, "YES")
	field(VAL,  "1.1")
}

record(ai, "$(PREFIX,undefined):TRGL_RB") {
	field(DESC, "Active trigger level.")
	field(EGU,  "V")
	field(DTYP, "asynFloat64")
	field(SCAN, "I/O Intr")
	field(INP,  "@asyn($(ASYN_PORT,undefined), 0)TriggerLevel")
}

record(stringin, "$(PREFIX,undefined):DPRX") {
	field(DESC, "Driver prefix.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)DrvPrefix")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):DREV") {
	field(DESC, "Driver revision.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)DrvRevision")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):DVDR") {
	field(DESC, "Driver vendor.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)DrvVendor")
	field(SCAN, "I/O Intr")	
}

record(stringin, "$(PREFIX,undefined):DDSC") {
	field(DESC, "Driver vendor.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)DrvDescription")
	field(SCAN, "I/O Intr")	
}

#record(mbbo, "$(PREFIX,undefined):CLKS") {
#	field(DESC, "Set the clock source for sampling.")
#	field(DTYP, "asynInt32")
#	field(OUT,  "@asyn($(ASYN_PORT,undefined), 0)ClockSource")
#	field(ZRVL, "0")
#	field(ZRST, "INT")
#	field(ONVL, "5")
#	field(ONST, "EXT1")
#}

record(ao, "$(PREFIX,undefined):CLKF_SP") {
	field(DESC, "Set the sampling rate.")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(ASYN_PORT,undefined), 0)ClockFrequency")
	field(EGU,  "GS/s")
	field(HOPR, "4")
	field(LOPR, "0.01")
	field(VAL,  "4")
	field(PINI, "YES")
	field(PREC, "3")
}

record(ai, "$(PREFIX,undefined):CLKF_RB") {
	field(DESC, "Applied sampling frequency.")
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(ASYN_PORT,undefined), 0)ClockFrequency")
	field(SCAN, "I/O Intr")
	field(EGU,  "GS/s")
	field(PREC, "3")
}

#record(longout, "$(PREFIX,undefined):CLKD") {
#	field(DESC, "Clock divider")
#	field(DTYP, "asynInt32")
#	field(OUT,	"@asyn($(ASYN_PORT,undefined), 0)ClockDivisor")
#}

#record(ai, "$(PREFIX,undefined):CLKF_RB") {
#	field(DESC, "RBV for the internal clock frequency.")
#	field(DTYP, "asynFloat64")
#	field(SCAN, "I/O Intr")
#	field(INP,  "@asyn($(ASYN_PORT,undefined), 0)ClockFrequency")
#	field(VAL,  "1")
#}

record(ai, "$(PREFIX,undefined):TMP") {
	field(DESC, "Temperature.")
	field(DTYP, "asynFloat64")
	field(INP, "@asyn($(ASYN_PORT,undefined), 0)Temperature")
	field(SCAN, "1 second")
	field(EGU,  "C")
	field(HIGH, "39")
	field(HIHI, "40")
	field(HSV,  "MINOR")
	field(HHSV, "MAJOR")
}
## Project       : Agilient m9210A
## Description   : Provides EPICS support for m9210A DAQ board
## Authors       : Vyacheslav Isaev <slava.isaev@cosylab.com>
##
## Copyright (c) 2015 Cosylab d.d.
# ------------------------------- [ Channel Group  ] -------------------------------
# Template file: m9210ChannelGroup.template
#

record(mbbi, "$(PREFIX,undefined):AI:STAT") {
	field(DESC, "The state of the channel.")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(ASYN_PORT,undefined).ai, -1)State")
	field(ZRVL, "0")
	field(ZRST, "UNKNOWN")
	field(ONVL, "1")
	field(ONST, "IOCINIT")
	field(TWVL, "2")
	field(TWST, "DISABLED")
	field(THVL, "3")
	field(THST, "ENABLED")
	field(FRVL, "4")
	field(FRST, "PROCESSING")
	field(FVVL, "5")
	field(FVST, "DEGRADED")
	field(SXVL, "6")
	field(SXST, "ERROR")
	field(SVVL, "7")
	field(SVST, "RESETTING")
	field(EIVL, "8")
	field(EIST, "FAULT")
	field(EIVL, "9")
	field(EIST, "READY")
	field(SCAN, "I/O Intr")	
}

# Messaging
record(waveform, "$(PREFIX,undefined):AI:MSGS") {
	field(DESC, "Send message to device driver.")
	field(DTYP, "asynOctetWrite")
	field(INP, "@asyn($(ASYN_PORT,undefined).ai, -1)Command")
	field(FTVL, "UCHAR")
	field(NELM, "255")	
}

record(waveform, "$(PREFIX,undefined):AI:MSGR") {
	field(DESC, "Receive message from device driver.")
	field(DTYP, "asynOctetRead")
	field(INP, "@asyn($(ASYN_PORT,undefined).ai, -1)Command")
	field(SCAN, "I/O Intr")	
	field(FTVL, "UCHAR")
	field(NELM, "255")
}

record(bo, "$(PREFIX,undefined):AI:ENBL")
{
	field(DTYP, "asynInt32")
    field(OUT,  "@asyn( $(ASYN_PORT,undefined).ai, -1)Enabled")
	field(ZNAM, "DISABLED")
	field(ONAM, "ENABLED")    
    field(PINI, "YES")        
    field(VAL,  "1")
}


record(bi, "$(PREFIX,undefined):AI:ENBL_RB") {
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
    field(INP,  "@asyn( $(ASYN_PORT,undefined).ai, -1)Enabled")
	field(ZNAM, "DISABLED")
	field(ONAM, "ENABLED")
}
## Project       : Agilient m9210A
## Description   : Provides EPICS support for m9210A DAQ board
## Authors       : Vyacheslav Isaev <slava.isaev@cosylab.com>
##
## Copyright (c) 2015 Cosylab d.d.
# ------------------------- [ Analog Input Channel ] -------------------------
# Template file: m9210AnalogInputChannel.template
#

## Project       : Agilient m9210A
## Description   : Provides EPICS support for m9210A DAQ board
## Authors       : Vyacheslav Isaev <slava.isaev@cosylab.com>
##
## Copyright (c) 2015 Cosylab d.d.



