
# Base record set for an EVR
#
# Macros:
#  P = record name prefix
#  OBJ = devObj name
#  EVNT1HZ = DB event number for the 1 second tick

# Master enable for the EVR. If not set then very little will happen.
#
# If disabled, an EVR will automatically enable when the event link becomes active.
# This allows for bumpless cold starts. For this reason the enable property
# should not be included in any autosave request files.
# cf. $(SYS){$(D)}Link:Init-FO_
#
record(bo, "$(SYS){$(D)}Ena-Sel") {
  field(DESC, "Master HW Enable")
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR), PROP=Enable")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# The number of times the hardware heartbeat timer has expired.
#
# This indicates that the EVG is not sending event code 122
# which may mean that it is misconfigured or hung.
#
record(longin, "$(SYS){$(D)}Cnt:LinkTimo-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR), PROP=HB Timeout Count")
  field(SCAN, "I/O Intr")
  field(DESC, "# of heartbeat timeout")
}

record(bo, "$(SYS){$(D)}ExtInhib-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR), PROP=External Inhibit")
  field(PINI, "YES")
  field(DESC, "Use HW trigger inhibit (EVRTG only)")
  field(MASK, "1")
  field(ZNAM, "Use Inhibit")
  field(ONAM, "Always Permit")
  field(OSV, "MINOR")
  info(autosaveFields_pass0, "VAL")
}

# Status of phase locked loop which synchronizes an EVR's local oscilator
# with the phase of the EVG's oscilator. Outputs will not be stable unless the PLL is locked.
#
# Except for immediately (<< 1 sec) after a change to the fractional synthesizer, this property
# should always read as true (locked). Reading false for longer then one second is likely an
# indication that the fractional synthesize is misconfigured, or that a hardware fault has occured.
#
# eg. The fiber is unplugged
#
record(bi, "$(SYS){$(D)}Link-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(EVR), PROP=Link Status")
  field(DESC, "Status of event link")
  field(SCAN, "1 second")
  field(ZNAM, "Fail")
  field(ONAM, "OK")
  field(ZSV , "MAJOR")
  field(FLNK, "$(SYS){$(D)}Cnt:RxErr-I")
}

record(longin, "$(SYS){$(D)}DBus-I") {
  field(DTYP, "Obj Prop uint16")
  field(DESC, "Read the DBus state")
  field(INP , "@OBJ=$(EVR), PROP=DBus State")
  info(autosaveFields_pass0, "SCAN")
}

# The number of event link errors which have occurred.
record(longin, "$(SYS){$(D)}Cnt:RxErr-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Receive Error Count")
  field(INP , "@OBJ=$(EVR), PROP=Receive Error Count")
  field(TSEL, "$(SYS){$(D)}Link-Sts.TIME")
  field(FLNK, "$(SYS){$(D)}Cnt:HwOflw-I")
}

# Counter the number of hardware event buffer overflows.
#
# There is a single hardware buffer for all event codes.
# When it overflows arbitrary events will fail to be delivered to software.
# This can cause the timestamp to falsely be invalidated,
# and can disrupt database processing which depends on event reception.
#
# An overflow does not effect physical outputs.
# This is a serious error which should be corrected.
record(longin, "$(SYS){$(D)}Cnt:HwOflw-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Hw Overflow Count")
  field(INP , "@OBJ=$(EVR), PROP=FIFO Overflow Count")
  field(TSEL, "$(SYS){$(D)}Cnt:RxErr-I.TIME")
  field(FLNK, "$(SYS){$(D)}Cnt:SwOflw-I")
}

# Counts overflows in all of the per event software buffers.
#
# This indicates that the period between successive events is shorter
# then the runtime of the code (callbacks, and database processing)
# that is causes. Extra events are being dropped and cause no action.
#
# Actions of other event codes are not effected.
#
# cf. var("mrmEvrFIFOPeriod") to change/disable soft rate limit
#
# Actions of other event codes are not effected.
record(longin, "$(SYS){$(D)}Cnt:SwOflw-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Sw Overrate Count")
  field(INP , "@OBJ=$(EVR), PROP=FIFO Over rate")
  field(TSEL, "$(SYS){$(D)}Cnt:RxErr-I.TIME")
  field(FLNK, "$(SYS){$(D)}Link:Init-FO_")
}

# Detect the first time the event link
# is online.  Then set master enable.
record(calcout, "$(SYS){$(D)}Link:Init-FO_") {
  field(ASG, "private")
  field(DESC, "Detect initial link up")
  field(INPA, "$(SYS){$(D)}Link-Sts")
  field(CALC, "A")
  field(OUT , "$(SYS){$(D)}Ena-Sel PP")
  field(OOPT, "Transition To Non-zero")
  field(ODLY, "1.0")
  field(TSEL, "$(SYS){$(D)}Link-Sts.TIME")
}

# Frequency of an EVR's local oscilator.
#
# This must be close enough to the EVG master oscilator to allow the phase locked loop in the EVR to lock.
record(ao, "$(SYS){$(D)}Link:Clk-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR), PROP=Clock")
  field(PINI, "YES")
  field(DESC, "Event Link speed")
  field(VAL , "$(FEVT=124.916)")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "50")
  field(DRVH, "150")
  field(DRVL, "50")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)}Link:Clk-I")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}

record(ai, "$(SYS){$(D)}Link:Clk-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR), PROP=Clock")
  field(DESC, "Event Link speed")
  field(PINI, "YES")
  field(UDF , "0")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)}Link:ClkErr-I")
  info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}

record(calc, "$(SYS){$(D)}Link:ClkErr-I") {
  field(CALC, "(A-B)*1000")
  field(EGU , "KHz")
  field(PREC, "3")
  field(INPA, "$(SYS){$(D)}Link:Clk-SP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I")
  field(TSEL, "$(SYS){$(D)}Link:Clk-I.TIME")
  field(FLNK, "$(SYS){$(D)}Link:ClkPeriod-I")
  info(autosaveFields_pass0, "EGU CALC PREC")
}

# Intended for use in calculations
record(calc, "$(SYS){$(D)}Link:ClkPeriod-I") {
  field(DESC, "Event period")
  field(CALC, "B/A")
  field(EGU , "s")
  field(PREC, "3")
  field(INPA, "$(SYS){$(D)}Link:Clk-SP")
  field(INPB, "$(SYS){$(D)}Link:Clk-SP.ESLO")
  field(TSEL, "$(SYS){$(D)}Link:Clk-I.TIME")
}

record(longin, "$(SYS){$(D)}Cnt:IRQ-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Interrupt Count")
  field(SCAN, "1 second")
  field(INP , "@OBJ=$(EVR), PROP=Interrupt Count")
  field(FLNK, "$(SYS){$(D)}Rate:IRQ-I")
}

record(calc, "$(SYS){$(D)}Rate:IRQ-I") {
  field(DESC, "Interrupt rate")
  field(INPA, "$(SYS){$(D)}Cnt:IRQ-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "Hz")
}

record(longin, "$(SYS){$(D)}Cnt:FIFOEvt-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Event Count")
  field(SCAN, "1 second")
  field(INP , "@OBJ=$(EVR), PROP=FIFO Event Count")
  field(FLNK, "$(SYS){$(D)}Rate:FIFOEvt-I")
}

record(calc, "$(SYS){$(D)}Rate:FIFOEvt-I") {
  field(DESC, "FIFO reception rate")
  field(INPA, "$(SYS){$(D)}Cnt:FIFOEvt-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "evt/s")
  field(FLNK, "$(SYS){$(D)}Cnt:FIFOLoop-I")
}

record(longin, "$(SYS){$(D)}Cnt:FIFOLoop-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Loop Count")
  field(INP , "@OBJ=$(EVR), PROP=FIFO Loop Count")
  field(FLNK, "$(SYS){$(D)}Rate:FIFOLoop-I")
}

record(calc, "$(SYS){$(D)}Rate:FIFOLoop-I") {
  field(DESC, "FIFO service rate")
  field(INPA, "$(SYS){$(D)}Cnt:FIFOLoop-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "Hz")
  field(FLNK, "$(SYS){$(D)}FIFOCap-I")
}

# average number of events taken from the FIFO during each loop
record(calc, "$(SYS){$(D)}FIFOCap-I") {
  field(DESC, "FIFO capacity utilization")
  field(INPA, "$(SYS){$(D)}Rate:FIFOEvt-I")
  field(INPB, "$(SYS){$(D)}Rate:FIFOLoop-I")
  field(INPC, "5.11")
  field(CALC, "A/B/C")
  field(EGU , "%")
  field(HIHI, "98")
  field(HIGH, "80")
  field(LOW , "-1")
  field(HHSV, "MAJOR")
  field(HSV , "MINOR")
  field(LSV , "INVALID")
  info(autosaveFields_pass0, "HIHI HIGH LOW")
}

record(bi, "$(SYS){$(D)}Pll-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(EVR), PROP=PLL Lock Status")
  field(SCAN, "1 second")
  field(PINI, "YES")
  field(DESC, "Status of PLL")
  field(ZNAM, "Error")
  field(ONAM, "OK")
  field(ZSV , "MAJOR")
}

record(stringin, "$(SYS){$(D)}HwType-I") {
  field(DESC, "Hardware type code")
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(EVR), PROP=Model")
  field(PINI, "YES")
}

record(stringin, "$(SYS){$(D)}FwVer-I") {
  field(DESC, "Firmware version")
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(EVR), PROP=Version")
  field(PINI, "YES")
}

record(stringin, "$(SYS){$(D)}SwVer-I") {
  field(DESC, "Software version")
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(EVR), PROP=Sw Version")
  field(PINI, "YES")
}

record(stringin, "$(SYS){$(D)}CommitHash-I") {
  field(DESC, "Commit hash")
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(EVR), PROP=CommitHash")
  field(PINI, "YES")
}

# Geographic location (eg. slot number)
# if available, fallback to logical bus address
record(stringin, "$(SYS){$(D)}Pos-I") {
  field(DESC, "Physical card position")
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(EVR), PROP=Position")
  field(PINI, "YES")
}

record(fanout, "$(SYS){$(D)}Time:Init-FO_") {
  field(ASG, "private")
  field(PINI, "YES")
  field(LNK1, "$(SYS){$(D)}Time:Clock-SP")
  field(LNK2, "$(SYS){$(D)}Time:Src-Sel")
}

# Indicates if the EVR has a current, valid timestamp.
# Condition under which timestamp is declared invalid include:
#
# * TS counter reset event received, but seconds value not updated.
# * Found timestamp with previous invalid value. Catches old timestamp in buffers.
# * TS counter exceeded limit (eg. missed reset event)
# * New seconds value is less then the last valid values,
#   or more then two greater then the last valid value. (Light Source time model only).
#   This will reject single bad values sent by the EVG.
# * Event Link error (Status is error).
#
# The timestamp will become valid when a new seconds value is received from the EVG.
record(bi, "$(SYS){$(D)}Time:Valid-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(EVR), PROP=Timestamp Valid")
  field(PINI, "YES")
  field(SCAN, "I/O Intr")
  field(ZSV , "MAJOR")
  field(ZNAM, "Invalid")
  field(ONAM, "Valid")
}

record(mbbo, "$(SYS){$(D)}Time:Src-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)}Time:Src-Sel_")
  field(PINI, "YES")
  field(ZRST, "Event clock")
  field(ONST, "Mapped code(s)")
  field(TWST, "DBus 4")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(FLNK, "$(SYS){$(D)}Time:Src-Sel_")
  info(autosaveFields_pass0, "VAL")
}

# Determines what causes the timestamp event counter to tick. There are three possible choices.
#
# * Event clock Use an integer divisor of the EVR's local oscilator.
# * Mapped code(s) Increments the counter whenever certain events arrive. These codes can be defined using special mapping records.
# * DBus 4 Increments on the 0->1 transition of DBus bit #4.
#
record(longout, "$(SYS){$(D)}Time:Src-Sel_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR), PROP=Timestamp Source")
  field(FLNK, "$(SYS){$(D)}Time:Clock-I")
}

# Specifies the rate at which the timestamp event counter will be incremented. This determines the resolution of all timestamps.
#
# This setting is used in conjunction with the 'Timestamp Source'.
#
# When the timestamp source is set to "Event clock" this property is used
# to compute an integer divider from the EVR's local oscilator frequency
# to the given frequency. Since this may not be exact it is recommended
# to read back the actual divider setting via the "Timestamp Prescaler" property.
#
record(ao, "$(SYS){$(D)}Time:Clock-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR), PROP=Timestamp Clock")
  field(DESC, "Timestamp frequency")
  field(PINI, "YES")
  field(VAL , "$(FEVT=124.916)")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "0")
  field(DRVH, "150")
  field(DRVL, "0")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)}Time:Clock-I")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}

record(ai, "$(SYS){$(D)}Time:Clock-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR), PROP=Timestamp Clock")
  field(SCAN, "1 second")
  field(DESC, "Timestamp frequency")
  field(PINI, "RUN")
  field(UDF , "0")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "0")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)}Time:Div-I")
}

# When using the "Event clock" timestamp source this will return the actual divisor used.
# In other modes it reads 0.
#
record(longin, "$(SYS){$(D)}Time:Div-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR), PROP=Timestamp Prescaler")
  field(DESC, "Timestamp divider")
}

# Time of last received event 125 (aka. timestamp reset)
#
# Due to firmware implementation details, the reception time of 125 does not
# reflect the reset of the sub-seconds counter, and will never have nsec==0.
#
record(stringin, "$(SYS){$(D)}Time-I") {
  field(DTYP, "EVR Timestamp")
  field(INP , "@OBJ=$(EVR), Code=$(EVNT1HZ=125)")
  field(SCAN, "Event")
  field(EVNT, "$(EVNT1HZ=125)")
  field(TSE , "-2")
}

# Selects Event link data mode.
#
# This chooses between DBus only, and DBus+Buffer (default) modes.
# In DBus only mode Data Buffer reception is not possible.
#
# Must match EVG setting
#
record(bo, "$(SYS){$(D)}Link:RxMode-Sel") {
  field(DESC, "Downstream data mode")
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):BUFRX, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "DBus only")
  field(ONAM, "DBus+Buffer")
  info(autosaveFields_pass0, "VAL")
}

record(waveform, "$(SYS){$(D)}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(mbbo, "$(SYS){$(D)}PLL-Bandwidth-Sel") {
    field( DESC, "EVR Evt Clock Bandwidth")
    field( DTYP, "Obj Prop uint16")
    field( OUT,  "@OBJ=$(EVR), PROP=PLL Bandwidth")
    field( PINI, "YES")
    field( VAL,  "2")
    field( ZRST, "Narrow")
    field( ONST, "Med. Narrow")
    field( TWST, "Nominal")
    field( THST, "Med. Wide")
    field( FRST, "Wide")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( THVL, "3")
    field( FRVL, "4")
    field( FVSV, "INVALID")
    field( SXSV, "INVALID")
    field( SVSV, "INVALID")
    field( EISV, "INVALID")
    field( NISV, "INVALID")
    field( TESV, "INVALID")
    field( ELSV, "INVALID")
    field( TVSV, "INVALID")
    field( TTSV, "INVALID")
    field( FTSV, "INVALID")
    field( FFSV, "INVALID")
    field( UNSV, "INVALID")
    field( FLNK, "$(SYS){$(D)}PLL-Bandwidth-RB")
    info( autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)}PLL-Bandwidth-RB") {
    field( DESC, "EVR Evt Clock Bandwidth")
    field( DTYP, "Obj Prop uint16")
    field( INP,  "@OBJ=$(EVR), PROP=PLL Bandwidth")
    field( ZRST, "Narrow")
    field( ONST, "Med. Narrow")
    field( TWST, "Nominal")
    field( THST, "Med. Wide")
    field( FRST, "Wide")
    field( ZRVL, "0")
    field( ONVL, "1")
    field( TWVL, "2")
    field( THVL, "3")
    field( FRVL, "4")
}


record(mbbo, "$(SYS){$(D)}Src:Clk-SP") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR), PROP=Clock Mode")
  field(PINI, "YES")
  field(ZRST, "EVG")
  field(ONST, "Internal")
  field(TWST, "EVG FB:Internal")
  field(THST, "EVG FB:stop")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(FLNK, "$(SYS){$(D)}Src:Clk-RB")
  info(autosaveFileds_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)}Src:Clk-RB") {
  field(DTYP, "Obj Prop uint16")
  field(INP , "@OBJ=$(EVR), PROP=Clock Mode")
  field(PINI, "YES")
  field(ZRST, "EVG")
  field(ONST, "Internal")
  field(TWST, "EVG FB:Internal")
  field(THST, "EVG FB:stop")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
}


record(waveform, "$(SYS){$(D)}dbus:send:s8") {
  field(DESC, "Send Buffer")
  field(DTYP, "MRF Data Buf Tx")
  field(INP , "@OBJ=$(EVR):BUFTX, Proto=1, P=Data Tx")
  field(FTVL, "CHAR")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)}dbus:send:u32") {
  field(DESC, "Send Buffer")
  field(DTYP, "MRF Data Buf Tx")
  field(INP , "@OBJ=$(EVR):BUFTX, Proto=1, P=Data Tx")
  field(FTVL, "ULONG")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
  info(autosaveFields_pass1, "VAL")
}
record(longout, "$(SYS){$(D)}EvtCode-SP") {
  field(DESC, "Sent software event")
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR), PROP=EvtCode")
  field(VAL , "0")
  field(PINI, "YES") # send event 0 is a no-op
}

# software time source simulation
# included here as it depends on SW event feature

record (stringin, "$(SYS){$(D)}Timestamp-RB") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(EVR), PROP=NextSecond")
  field(SCAN, "1 second")
  field(FLNK, "$(SYS){$(D)}TimeErr-I")
}

record(ai, "$(SYS){$(D)}TimeErr-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR), PROP=Time Error")
}
# This TimeSrc is usually used for EVR standalone test.
# It is better to distinguish another similar db name $(SYS){$(D)}Time:Src-Sel inside evrbase.db
record(mbbo, "$(SYS){$(D)}SoftTimeSrc-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR), PROP=TimeSrc")
  field(ZRST, "Disable (noop)")
  field(ONST, "External clk")
  field(TWST, "Sys. Clock")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
}

record(bo,"$(SYS){$(D)}SyncTimestamp-Cmd" ) {
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR), PROP=Sync TS")
  field(DESC, "EVG Sync TimeStamp")
}
# Selects Event link data mode.
#
# This chooses between DBus only, and DBus+Buffer (default) modes.
# In DBus only mode Data Buffer reception is not possible.
#
# Must match EVR setting
#
record(bo, "$(SYS){$(D)}Link:TxMode-Sel") {
  field(DESC, "Data mode")
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):BUFTX, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "DBus only")
  field(ONAM, "DBus+Buffer")
  info(autosaveFields_pass0, "VAL")
}

# When a buffer with the given Protocol ID is received a copy is placed in this record.
# It is possible to have many records receiving the same Protocol ID. Data is received
# as a byte array and interpreted according to FTVL. For multi-byte types the
# transmission byte order is assumed to be big endian. Data is truncated to a multiple
# of the element size.
#
# Many record (or other listeners) may register for the same Protocol ID.
# The special Protocol ID 0xff00 may be used to cause a listener to receive messages destined for any ID.
record(waveform, "$(SYS){$(D)}dbus:recv:s8") {
  field(DESC, "Recv Buffer")
  field(DTYP, "MRM EVR Buf Rx")
  field(INP , "@OBJ=$(EVR):BUFRX, Proto=0xff00, P=Data Rx")
  field(FTVL, "CHAR")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
}

record(waveform, "$(SYS){$(D)}dbus:recv:u32") {
  field(DESC, "Recv Buffer")
  field(DTYP, "MRM EVR Buf Rx")
  field(INP , "@OBJ=$(EVR):BUFRX, Proto=0xff00, P=Data Rx")
  field(FTVL, "ULONG")
  field(NELM, "2046")
  info(autosaveFields_pass0, "INP")
}
# Macros
#  P
#  EVG
#  seqNum
#
# Device indpendent parts of sequencer (excludes trigger source mapping)

record(mbbo, "$(SYS){$(D)-SoftSeq:0}TsResolution-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMEUNITS")
  field(ZRST, "Ticks")
  field(ONST, "Sec")
  field(TWST, "uSec")
  field(THST, "nSec")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "1000000")
  field(THVL, "1000000000")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(FLNK, "$(SYS){$(D)-SoftSeq:0}TsResolution-RB")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:0}TsResolution-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMEUNITS")
  field(ZRST, "Ticks")
  field(ONST, "Sec")
  field(TWST, "uSec")
  field(THST, "nSec")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "1000000")
  field(THVL, "1000000000")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}EvtEna-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event enable array")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENA")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}EvtEna-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event enable readback")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENA")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}EvtMask-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event mask array")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=MASK")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}EvtMask-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event mask readback")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=MASK")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}EvtCode-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event code array")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=CODES")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}EvtCode-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event code readback")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=CODES")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}Timestamp-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence timestamp array")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMES")
  field(NELM, "2047")
  field(FTVL, "DOUBLE")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}Timestamp-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence timestamp readback")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMES")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "DOUBLE")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:0}RunMode-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=RUN_MODE")
  field(UDF,  "0")
  field(VAL,  "1") # default to Single
  field(ZRVL, "0")
  field(ONVL, "2")
  field(ZRST, "Normal")
  field(ONST, "Single")
  field(TWSV, "INVALID")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:0}RunMode-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=RUN_MODE")
  field(SCAN, "I/O Intr")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "Normal")
  field(ONST, "Automatic")
  field(TWST, "Single")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(bo, "$(SYS){$(D)-SoftSeq:0}Commit-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Commit EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=COMMIT")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "Commit")
  field(ONAM, "Commit")
}

record(bo, "$(SYS){$(D)-SoftSeq:0}Load-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "ALLOC EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=LOAD")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(bo, "$(SYS){$(D)-SoftSeq:0}Unload-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Dealloc EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=UNLOAD")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(bo, "$(SYS){$(D)-SoftSeq:0}Enable-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Enable EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENABLE")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(FLNK, "$(SYS){$(D)-SoftSeq:0}Enable-RB")
  field(ASG , "")
}

record(bo, "$(SYS){$(D)-SoftSeq:0}Disable-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Disable EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=DISABLE")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(ASG , "")
}

record(bo, "$(SYS){$(D)-SoftSeq:0}SoftTrig-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Sequence RAM soft trigger")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SOFT_TRIG")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:0}SwMask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(NOBT, "4")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWMASK")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:0}SwMask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWMASK")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:0}SwEna-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(NOBT, "4")
  field(OUT,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWENA")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:0}SwEna-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWENA")
  field(SCAN, "I/O Intr")
}

record(bi, "$(SYS){$(D)-SoftSeq:0}Load-RB") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Load status")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=LOADED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Unloaded")
  field(ONAM, "Loaded")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-SoftSeq:0}Commit-RB") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Commit status")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=COMMITTED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Uncommitted")
  field(ONAM, "Committed")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-SoftSeq:0}Enable-Sts") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Ena status")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENABLED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(FLNK, "")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:0}Enable-RB")
}

record(stringin, "$(SYS){$(D)-SoftSeq:0}Error-RB") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Sequence error msg.")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ERROR")
  field(SCAN, "I/O Intr")
}

record(longin, "$(SYS){$(D)-SoftSeq:0}NumOfStarts-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "# times soft sequence starts")
  field(INP , "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=NUM_STARTS")
  field(SCAN, "I/O Intr") # on sequencer start
  field(FLNK, "")
}

record(longin, "$(SYS){$(D)-SoftSeq:0}NumOfRuns-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "# times soft sequence ran")
  field(INP,  "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=NUM_RUNS")
  field(SCAN, "I/O Intr") # on sequencer stop
}

#
#Process Load-Cmd record if the sequence  was perviously in LOADED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:0}Load-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:0}Load-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:0}Load-Cmd PP")
}

#
#Process Commit-Cmd record if the sequence was perviously in COMMITTED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:0}Commit-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:0}Commit-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:0}Commit-Cmd PP")
}

#
#Process Enable-Cmd record if the sequence was perviously in ENABLED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:0}Enable-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:0}Enable-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:0}Enable-Cmd PP")
}

record(fanout, "$(SYS){$(D)-SoftSeq:0}InitSeq-FOut_") {
  field(ASG, "private")
  field(DESC, "Boot of sequence for sequencer")
  field(SELM, "All")
  field(PINI, "RUNNING")
  field(LNK1, "")
  field(LNK2, "$(SYS){$(D)-SoftSeq:0}TsResolution-Sel")
  field(LNK3, "$(SYS){$(D)-SoftSeq:0}EvtCode-SP")
  field(LNK4, "$(SYS){$(D)-SoftSeq:0}Timestamp-SP")
  field(LNK5, "$(SYS){$(D)-SoftSeq:0}RunMode-Sel")
  field(LNK6, "$(SYS){$(D)-SoftSeq:0}InitSeq:Cont-FOut_")
}

record(fanout, "$(SYS){$(D)-SoftSeq:0}InitSeq:Cont-FOut_") {
  field(ASG, "private")
  field(DESC, "Boot of sequence for sequencer")
  field(SELM, "All")
  field(LNK1, "$(SYS){$(D)-SoftSeq:0}TrigSrc:Init-FOut_")
  field(LNK2, "$(SYS){$(D)-SoftSeq:0}Commit-Calc_")
  field(LNK3, "$(SYS){$(D)-SoftSeq:0}Load-Calc_")
  field(LNK4, "$(SYS){$(D)-SoftSeq:0}Enable-Calc_")
}

record(waveform, "$(SYS){$(D)-SoftSeq:0}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Macros
#  P
#  EVG
#  seqNum
#
# Device indpendent parts of sequencer (excludes trigger source mapping)

record(mbbo, "$(SYS){$(D)-SoftSeq:1}TsResolution-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMEUNITS")
  field(ZRST, "Ticks")
  field(ONST, "Sec")
  field(TWST, "uSec")
  field(THST, "nSec")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "1000000")
  field(THVL, "1000000000")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(FLNK, "$(SYS){$(D)-SoftSeq:1}TsResolution-RB")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:1}TsResolution-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMEUNITS")
  field(ZRST, "Ticks")
  field(ONST, "Sec")
  field(TWST, "uSec")
  field(THST, "nSec")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "1000000")
  field(THVL, "1000000000")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}EvtEna-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event enable array")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENA")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}EvtEna-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event enable readback")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENA")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}EvtMask-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event mask array")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=MASK")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}EvtMask-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event mask readback")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=MASK")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}EvtCode-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event code array")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=CODES")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}EvtCode-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event code readback")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=CODES")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}Timestamp-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence timestamp array")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMES")
  field(NELM, "2047")
  field(FTVL, "DOUBLE")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}Timestamp-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence timestamp readback")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMES")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "DOUBLE")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:1}RunMode-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=RUN_MODE")
  field(UDF,  "0")
  field(VAL,  "1") # default to Single
  field(ZRVL, "0")
  field(ONVL, "2")
  field(ZRST, "Normal")
  field(ONST, "Single")
  field(TWSV, "INVALID")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:1}RunMode-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=RUN_MODE")
  field(SCAN, "I/O Intr")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "Normal")
  field(ONST, "Automatic")
  field(TWST, "Single")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(bo, "$(SYS){$(D)-SoftSeq:1}Commit-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Commit EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=COMMIT")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "Commit")
  field(ONAM, "Commit")
}

record(bo, "$(SYS){$(D)-SoftSeq:1}Load-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "ALLOC EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=LOAD")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(bo, "$(SYS){$(D)-SoftSeq:1}Unload-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Dealloc EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=UNLOAD")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(bo, "$(SYS){$(D)-SoftSeq:1}Enable-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Enable EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENABLE")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(FLNK, "$(SYS){$(D)-SoftSeq:1}Enable-RB")
  field(ASG , "")
}

record(bo, "$(SYS){$(D)-SoftSeq:1}Disable-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Disable EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=DISABLE")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(ASG , "")
}

record(bo, "$(SYS){$(D)-SoftSeq:1}SoftTrig-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Sequence RAM soft trigger")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SOFT_TRIG")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:1}SwMask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(NOBT, "4")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWMASK")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:1}SwMask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWMASK")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:1}SwEna-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(NOBT, "4")
  field(OUT,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWENA")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:1}SwEna-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWENA")
  field(SCAN, "I/O Intr")
}

record(bi, "$(SYS){$(D)-SoftSeq:1}Load-RB") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Load status")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=LOADED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Unloaded")
  field(ONAM, "Loaded")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-SoftSeq:1}Commit-RB") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Commit status")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=COMMITTED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Uncommitted")
  field(ONAM, "Committed")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-SoftSeq:1}Enable-Sts") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Ena status")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENABLED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(FLNK, "")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:1}Enable-RB")
}

record(stringin, "$(SYS){$(D)-SoftSeq:1}Error-RB") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Sequence error msg.")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ERROR")
  field(SCAN, "I/O Intr")
}

record(longin, "$(SYS){$(D)-SoftSeq:1}NumOfStarts-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "# times soft sequence starts")
  field(INP , "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=NUM_STARTS")
  field(SCAN, "I/O Intr") # on sequencer start
  field(FLNK, "")
}

record(longin, "$(SYS){$(D)-SoftSeq:1}NumOfRuns-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "# times soft sequence ran")
  field(INP,  "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=NUM_RUNS")
  field(SCAN, "I/O Intr") # on sequencer stop
}

#
#Process Load-Cmd record if the sequence  was perviously in LOADED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:1}Load-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:1}Load-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:1}Load-Cmd PP")
}

#
#Process Commit-Cmd record if the sequence was perviously in COMMITTED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:1}Commit-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:1}Commit-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:1}Commit-Cmd PP")
}

#
#Process Enable-Cmd record if the sequence was perviously in ENABLED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:1}Enable-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:1}Enable-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:1}Enable-Cmd PP")
}

record(fanout, "$(SYS){$(D)-SoftSeq:1}InitSeq-FOut_") {
  field(ASG, "private")
  field(DESC, "Boot of sequence for sequencer")
  field(SELM, "All")
  field(PINI, "RUNNING")
  field(LNK1, "")
  field(LNK2, "$(SYS){$(D)-SoftSeq:1}TsResolution-Sel")
  field(LNK3, "$(SYS){$(D)-SoftSeq:1}EvtCode-SP")
  field(LNK4, "$(SYS){$(D)-SoftSeq:1}Timestamp-SP")
  field(LNK5, "$(SYS){$(D)-SoftSeq:1}RunMode-Sel")
  field(LNK6, "$(SYS){$(D)-SoftSeq:1}InitSeq:Cont-FOut_")
}

record(fanout, "$(SYS){$(D)-SoftSeq:1}InitSeq:Cont-FOut_") {
  field(ASG, "private")
  field(DESC, "Boot of sequence for sequencer")
  field(SELM, "All")
  field(LNK1, "$(SYS){$(D)-SoftSeq:1}TrigSrc:Init-FOut_")
  field(LNK2, "$(SYS){$(D)-SoftSeq:1}Commit-Calc_")
  field(LNK3, "$(SYS){$(D)-SoftSeq:1}Load-Calc_")
  field(LNK4, "$(SYS){$(D)-SoftSeq:1}Enable-Calc_")
}

record(waveform, "$(SYS){$(D)-SoftSeq:1}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}
# Macros
#  P
#  EVG
#  seqNum
#
# Device indpendent parts of sequencer (excludes trigger source mapping)

record(mbbo, "$(SYS){$(D)-SoftSeq:2}TsResolution-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMEUNITS")
  field(ZRST, "Ticks")
  field(ONST, "Sec")
  field(TWST, "uSec")
  field(THST, "nSec")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "1000000")
  field(THVL, "1000000000")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  field(FLNK, "$(SYS){$(D)-SoftSeq:2}TsResolution-RB")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:2}TsResolution-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMEUNITS")
  field(ZRST, "Ticks")
  field(ONST, "Sec")
  field(TWST, "uSec")
  field(THST, "nSec")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "1000000")
  field(THVL, "1000000000")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}EvtEna-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event enable array")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENA")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}EvtEna-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event enable readback")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENA")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}EvtMask-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event mask array")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=MASK")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}EvtMask-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event mask readback")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=MASK")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}EvtCode-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence event code array")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=CODES")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}EvtCode-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence event code readback")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=CODES")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "UCHAR")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}Timestamp-SP") {
  field(DTYP, "Obj Prop waveform out")
  field(DESC, "Sequence timestamp array")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMES")
  field(NELM, "2047")
  field(FTVL, "DOUBLE")
  info(autosaveFields_pass1, "VAL")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}Timestamp-RB") {
  field(DTYP, "Obj Prop waveform in")
  field(DESC, "Sequence timestamp readback")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TIMES")
  field(SCAN, "I/O Intr")
  field(NELM, "2047")
  field(FTVL, "DOUBLE")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:2}RunMode-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=RUN_MODE")
  field(UDF,  "0")
  field(VAL,  "1") # default to Single
  field(ZRVL, "0")
  field(ONVL, "2")
  field(ZRST, "Normal")
  field(ONST, "Single")
  field(TWSV, "INVALID")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:2}RunMode-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=RUN_MODE")
  field(SCAN, "I/O Intr")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(ZRST, "Normal")
  field(ONST, "Automatic")
  field(TWST, "Single")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
}

record(bo, "$(SYS){$(D)-SoftSeq:2}Commit-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Commit EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=COMMIT")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "Commit")
  field(ONAM, "Commit")
}

record(bo, "$(SYS){$(D)-SoftSeq:2}Load-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "ALLOC EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=LOAD")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(bo, "$(SYS){$(D)-SoftSeq:2}Unload-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Dealloc EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=UNLOAD")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(bo, "$(SYS){$(D)-SoftSeq:2}Enable-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Enable EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENABLE")
  field(VAL,  "1")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(FLNK, "$(SYS){$(D)-SoftSeq:2}Enable-RB")
  field(ASG , "")
}

record(bo, "$(SYS){$(D)-SoftSeq:2}Disable-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Disable EVG Sequence")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=DISABLE")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(ASG , "")
}

record(bo, "$(SYS){$(D)-SoftSeq:2}SoftTrig-Cmd") {
  field(DTYP, "Obj Prop command")
  field(DESC, "Sequence RAM soft trigger")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SOFT_TRIG")
  field(VAL,  "0")
  field(UDF,  "0")
  field(ZNAM, "0")
  field(ONAM, "1")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:2}SwMask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(NOBT, "4")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWMASK")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:2}SwMask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWMASK")
  field(SCAN, "I/O Intr")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:2}SwEna-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(NOBT, "4")
  field(OUT,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWENA")
}

record(mbbi, "$(SYS){$(D)-SoftSeq:2}SwEna-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Sequence RAM soft trigger")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=SWENA")
  field(SCAN, "I/O Intr")
}

record(bi, "$(SYS){$(D)-SoftSeq:2}Load-RB") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Load status")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=LOADED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Unloaded")
  field(ONAM, "Loaded")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-SoftSeq:2}Commit-RB") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Commit status")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=COMMITTED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Uncommitted")
  field(ONAM, "Committed")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-SoftSeq:2}Enable-Sts") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Soft Seq Ena status")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ENABLED")
  field(SCAN, "I/O Intr")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(FLNK, "")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:2}Enable-RB")
}

record(stringin, "$(SYS){$(D)-SoftSeq:2}Error-RB") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Sequence error msg.")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=ERROR")
  field(SCAN, "I/O Intr")
}

record(longin, "$(SYS){$(D)-SoftSeq:2}NumOfStarts-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "# times soft sequence starts")
  field(INP , "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=NUM_STARTS")
  field(SCAN, "I/O Intr") # on sequencer start
  field(FLNK, "")
}

record(longin, "$(SYS){$(D)-SoftSeq:2}NumOfRuns-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "# times soft sequence ran")
  field(INP,  "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=NUM_RUNS")
  field(SCAN, "I/O Intr") # on sequencer stop
}

#
#Process Load-Cmd record if the sequence  was perviously in LOADED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:2}Load-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:2}Load-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:2}Load-Cmd PP")
}

#
#Process Commit-Cmd record if the sequence was perviously in COMMITTED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:2}Commit-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:2}Commit-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:2}Commit-Cmd PP")
}

#
#Process Enable-Cmd record if the sequence was perviously in ENABLED state
#

record(calcout, "$(SYS){$(D)-SoftSeq:2}Enable-Calc_") {
  field(ASG, "private")
  field(CALC, "A")
  field(INPA, "$(SYS){$(D)-SoftSeq:2}Enable-RB NPP NMS")
  field(OOPT, "When Non-zero")
  field(OUT,  "$(SYS){$(D)-SoftSeq:2}Enable-Cmd PP")
}

record(fanout, "$(SYS){$(D)-SoftSeq:2}InitSeq-FOut_") {
  field(ASG, "private")
  field(DESC, "Boot of sequence for sequencer")
  field(SELM, "All")
  field(PINI, "RUNNING")
  field(LNK1, "")
  field(LNK2, "$(SYS){$(D)-SoftSeq:2}TsResolution-Sel")
  field(LNK3, "$(SYS){$(D)-SoftSeq:2}EvtCode-SP")
  field(LNK4, "$(SYS){$(D)-SoftSeq:2}Timestamp-SP")
  field(LNK5, "$(SYS){$(D)-SoftSeq:2}RunMode-Sel")
  field(LNK6, "$(SYS){$(D)-SoftSeq:2}InitSeq:Cont-FOut_")
}

record(fanout, "$(SYS){$(D)-SoftSeq:2}InitSeq:Cont-FOut_") {
  field(ASG, "private")
  field(DESC, "Boot of sequence for sequencer")
  field(SELM, "All")
  field(LNK1, "$(SYS){$(D)-SoftSeq:2}TrigSrc:Init-FOut_")
  field(LNK2, "$(SYS){$(D)-SoftSeq:2}Commit-Calc_")
  field(LNK3, "$(SYS){$(D)-SoftSeq:2}Load-Calc_")
  field(LNK4, "$(SYS){$(D)-SoftSeq:2}Enable-Calc_")
}

record(waveform, "$(SYS){$(D)-SoftSeq:2}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# EVR sequencer trigger sources in DC firmware
# 0-31  DlyGen
# 32-39 DBus
# 40-47 Prescalars
# 61 - SW
# 62 - Continuous
# 63 - Disable

# linked from mrmSoftSeq.template
# $(SYS){$(D)-SoftSeq:0}InitSeq:Cont-FOut_
record(fanout, "$(SYS){$(D)-SoftSeq:0}TrigSrc:Init-FOut_") {
  field(ASG, "private")
  field(LNK1, "$(SYS){$(D)-SoftSeq:0}TrigSrc-Sel_")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:0}TrigSrc:Pulse-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:0}TrigSrc-Sel_ PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:0}TrigSrc:0-Sel")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:0}TrigSrc:DBus-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:0}TrigSrc-Sel_ PP")
  field(ZRST, "DBus0")
  field(ONST, "DBus1")
  field(TWST, "DBus2")
  field(THST, "DBus3")
  field(FRST, "DBus4")
  field(FVST, "DBus5")
  field(SXST, "DBus6")
  field(SVST, "DBus7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:0}TrigSrc:1-Sel")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:0}TrigSrc:Scale-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:0}TrigSrc-Sel_ PP")
  field(ZRST, "None")
  field(ONST, "Software")
  field(TWST, "Prescaler 0")
  field(THST, "Prescaler 1")
  field(FRST, "Prescaler 2")
  field(FVST, "Prescaler 3")
  field(SXST, "Prescaler 4")
  field(SVST, "Prescaler 5")
  field(EIST, "Prescaler 6")
  field(NIST, "Prescaler 7")
  field(ZRVL, "0x03000000")
  field(ONVL, "0x01000000")
  field(TWVL, "40")
  field(THVL, "41")
  field(FRVL, "42")
  field(FVVL, "43")
  field(SXVL, "44")
  field(SVVL, "45")
  field(EIVL, "46")
  field(NIVL, "47")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:0}TrigSrc:2-Sel")
}

record(longout, "$(SYS){$(D)-SoftSeq:0}TrigSrc-Sel_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TRIG_SRC")
  field(VAL , "0x03000000") # default to None
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-SoftSeq:0}TrigSrc-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ0, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TRIG_SRC")
  field(UDF,  "0")
  field(SCAN, "I/O Intr")
  field(FLNK, "$(SYS){$(D)-SoftSeq:0}TrigSrc-RB")
}

record(stringin, "$(SYS){$(D)-SoftSeq:0}TrigSrc-RB") {
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-SoftSeq:0}TrigSrc-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 43 = Prescaler 3")
  info(lutS , " 44 = Prescaler 4")
  info(lutT , " 45 = Prescaler 5")
  info(lutU , " 46 = Prescaler 6")
  info(lutV , " 47 = Prescaler 7")
  info(lutW , " 0x01000000 = Software")
  info(lutY , " 0x03000000 = None")
}


#
# When Evt Clock Frequency changes, Sequencer Timestamp changes
#(only if TsInpMode = EGU).
#
#record(ai, "$(SYS){$(D)-SoftSeq:0}EvtClkFreq-RB_") {
#    field(INP,  "$ (SYS){$ (D)-EvtClk}Frequency-RB CP") - avoid the warning generation
#    field(FLNK, "$(SYS){$(D)-SoftSeq:0}EvtClkFreq:Cont-RB_")
#}
#
#record(ao, "$(SYS){$(D)-SoftSeq:0}EvtClkFreq:Cont-RB_") {
#    field(OUT,  "$(SYS){$(D)-SoftSeq:0}Timestamp-RB.PROC")
#    field(VAL,  "1")
#}

# EVR sequencer trigger sources in DC firmware
# 0-31  DlyGen
# 32-39 DBus
# 40-47 Prescalars
# 61 - SW
# 62 - Continuous
# 63 - Disable

# linked from mrmSoftSeq.template
# $(SYS){$(D)-SoftSeq:1}InitSeq:Cont-FOut_
record(fanout, "$(SYS){$(D)-SoftSeq:1}TrigSrc:Init-FOut_") {
  field(ASG, "private")
  field(LNK1, "$(SYS){$(D)-SoftSeq:1}TrigSrc-Sel_")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:1}TrigSrc:Pulse-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:1}TrigSrc-Sel_ PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:1}TrigSrc:0-Sel")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:1}TrigSrc:DBus-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:1}TrigSrc-Sel_ PP")
  field(ZRST, "DBus0")
  field(ONST, "DBus1")
  field(TWST, "DBus2")
  field(THST, "DBus3")
  field(FRST, "DBus4")
  field(FVST, "DBus5")
  field(SXST, "DBus6")
  field(SVST, "DBus7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:1}TrigSrc:1-Sel")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:1}TrigSrc:Scale-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:1}TrigSrc-Sel_ PP")
  field(ZRST, "None")
  field(ONST, "Software")
  field(TWST, "Prescaler 0")
  field(THST, "Prescaler 1")
  field(FRST, "Prescaler 2")
  field(FVST, "Prescaler 3")
  field(SXST, "Prescaler 4")
  field(SVST, "Prescaler 5")
  field(EIST, "Prescaler 6")
  field(NIST, "Prescaler 7")
  field(ZRVL, "0x03000000")
  field(ONVL, "0x01000000")
  field(TWVL, "40")
  field(THVL, "41")
  field(FRVL, "42")
  field(FVVL, "43")
  field(SXVL, "44")
  field(SVVL, "45")
  field(EIVL, "46")
  field(NIVL, "47")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:1}TrigSrc:2-Sel")
}

record(longout, "$(SYS){$(D)-SoftSeq:1}TrigSrc-Sel_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TRIG_SRC")
  field(VAL , "0x03000000") # default to None
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-SoftSeq:1}TrigSrc-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ1, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TRIG_SRC")
  field(UDF,  "0")
  field(SCAN, "I/O Intr")
  field(FLNK, "$(SYS){$(D)-SoftSeq:1}TrigSrc-RB")
}

record(stringin, "$(SYS){$(D)-SoftSeq:1}TrigSrc-RB") {
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-SoftSeq:1}TrigSrc-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 43 = Prescaler 3")
  info(lutS , " 44 = Prescaler 4")
  info(lutT , " 45 = Prescaler 5")
  info(lutU , " 46 = Prescaler 6")
  info(lutV , " 47 = Prescaler 7")
  info(lutW , " 0x01000000 = Software")
  info(lutY , " 0x03000000 = None")
}


#
# When Evt Clock Frequency changes, Sequencer Timestamp changes
#(only if TsInpMode = EGU).
#
#record(ai, "$(SYS){$(D)-SoftSeq:1}EvtClkFreq-RB_") {
#    field(INP,  "$ (SYS){$ (D)-EvtClk}Frequency-RB CP") - avoid the warning generation
#    field(FLNK, "$(SYS){$(D)-SoftSeq:1}EvtClkFreq:Cont-RB_")
#}
#
#record(ao, "$(SYS){$(D)-SoftSeq:1}EvtClkFreq:Cont-RB_") {
#    field(OUT,  "$(SYS){$(D)-SoftSeq:1}Timestamp-RB.PROC")
#    field(VAL,  "1")
#}

# EVR sequencer trigger sources in DC firmware
# 0-31  DlyGen
# 32-39 DBus
# 40-47 Prescalars
# 61 - SW
# 62 - Continuous
# 63 - Disable

# linked from mrmSoftSeq.template
# $(SYS){$(D)-SoftSeq:2}InitSeq:Cont-FOut_
record(fanout, "$(SYS){$(D)-SoftSeq:2}TrigSrc:Init-FOut_") {
  field(ASG, "private")
  field(LNK1, "$(SYS){$(D)-SoftSeq:2}TrigSrc-Sel_")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:2}TrigSrc:Pulse-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:2}TrigSrc-Sel_ PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:2}TrigSrc:0-Sel")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:2}TrigSrc:DBus-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:2}TrigSrc-Sel_ PP")
  field(ZRST, "DBus0")
  field(ONST, "DBus1")
  field(TWST, "DBus2")
  field(THST, "DBus3")
  field(FRST, "DBus4")
  field(FVST, "DBus5")
  field(SXST, "DBus6")
  field(SVST, "DBus7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:2}TrigSrc:1-Sel")
}

record(mbbo, "$(SYS){$(D)-SoftSeq:2}TrigSrc:Scale-Sel") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-SoftSeq:2}TrigSrc-Sel_ PP")
  field(ZRST, "None")
  field(ONST, "Software")
  field(TWST, "Prescaler 0")
  field(THST, "Prescaler 1")
  field(FRST, "Prescaler 2")
  field(FVST, "Prescaler 3")
  field(SXST, "Prescaler 4")
  field(SVST, "Prescaler 5")
  field(EIST, "Prescaler 6")
  field(NIST, "Prescaler 7")
  field(ZRVL, "0x03000000")
  field(ONVL, "0x01000000")
  field(TWVL, "40")
  field(THVL, "41")
  field(FRVL, "42")
  field(FVVL, "43")
  field(SXVL, "44")
  field(SVVL, "45")
  field(EIVL, "46")
  field(NIVL, "47")
  info(autosaveFields_pass0, "VAL")
    alias("$(SYS){$(D)-SoftSeq:2}TrigSrc:2-Sel")
}

record(longout, "$(SYS){$(D)-SoftSeq:2}TrigSrc-Sel_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TRIG_SRC")
  field(VAL , "0x03000000") # default to None
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-SoftSeq:2}TrigSrc-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):SEQ2, CLASS=SeqManager, PARENT=$(EVR):SEQMGR, PROP=TRIG_SRC")
  field(UDF,  "0")
  field(SCAN, "I/O Intr")
  field(FLNK, "$(SYS){$(D)-SoftSeq:2}TrigSrc-RB")
}

record(stringin, "$(SYS){$(D)-SoftSeq:2}TrigSrc-RB") {
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-SoftSeq:2}TrigSrc-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 32 = DBus 0")
  info(lutH , " 33 = DBus 1")
  info(lutI , " 34 = DBus 2")
  info(lutJ , " 35 = DBus 3")
  info(lutK , " 36 = DBus 4")
  info(lutL , " 37 = DBus 5")
  info(lutM , " 38 = DBus 6")
  info(lutN , " 39 = DBus 7")
  info(lutO , " 40 = Prescaler 0")
  info(lutP , " 41 = Prescaler 1")
  info(lutQ , " 42 = Prescaler 2")
  info(lutR , " 43 = Prescaler 3")
  info(lutS , " 44 = Prescaler 4")
  info(lutT , " 45 = Prescaler 5")
  info(lutU , " 46 = Prescaler 6")
  info(lutV , " 47 = Prescaler 7")
  info(lutW , " 0x01000000 = Software")
  info(lutY , " 0x03000000 = None")
}


#
# When Evt Clock Frequency changes, Sequencer Timestamp changes
#(only if TsInpMode = EGU).
#
#record(ai, "$(SYS){$(D)-SoftSeq:2}EvtClkFreq-RB_") {
#    field(INP,  "$ (SYS){$ (D)-EvtClk}Frequency-RB CP") - avoid the warning generation
#    field(FLNK, "$(SYS){$(D)-SoftSeq:2}EvtClkFreq:Cont-RB_")
#}
#
#record(ao, "$(SYS){$(D)-SoftSeq:2}EvtClkFreq:Cont-RB_") {
#    field(OUT,  "$(SYS){$(D)-SoftSeq:2}Timestamp-RB.PROC")
#    field(VAL,  "1")
#}

record(bo, "$(SYS){$(D)-SFP}Update-Cmd") {
  field(DTYP, "Obj Prop bool")
  field(SCAN, "10 second")
  field(OUT , "@OBJ=$(EVR):SFP, PROP=Update")
  field(ZNAM, "Update")
  field(ONAM, "Update")
  field(FLNK, "$(SYS){$(D)-SFP}T-I")
}

record(ai, "$(SYS){$(D)-SFP}T-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Temperature")
  field(DESC, "Tranceiver Temperature")
  field(ADEL, "0.5")
  field(HIGH, "50")
  field(HSV , "MINOR")
  field(HIHI, "60")
  field(HHSV, "MAJOR")
  field(LOW , "0")
  field(LSV , "INVALID")
  field(EGU , "C")
  field(PREC, "1")
  field(FLNK, "$(SYS){$(D)-SFP}Pwr:TX-I")
}

record(ai, "$(SYS){$(D)-SFP}Pwr:TX-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Power TX")
  field(DESC, "Tranceiver Output Power")
  field(ADEL, "5")
  field(HIGH, "800")
  field(HSV , "MINOR")
  field(LOW , "200")
  field(LSV , "MAJOR")
  field(LOLO, "-0.1") # SFP module removed
  field(LLSV, "INVALID")
  field(EGU , "uW")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "1")
  field(FLNK, "$(SYS){$(D)-SFP}Pwr:RX-I")
  info(autosaveFields_pass0, "LOW")
}

record(ai, "$(SYS){$(D)-SFP}Pwr:RX-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Power RX")
  field(DESC, "Tranceiver Input Power")
  field(ADEL, "5")
  field(HIGH, "800")
  field(HSV , "MINOR")
  field(LOW , "100")
  field(LSV , "MAJOR")
  field(LOLO, "-0.1") # SFP module removed
  field(LLSV, "INVALID")
  field(EGU , "uW")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "1")
  field(FLNK, "$(SYS){$(D)-SFP}Speed:Link-I")
  info(autosaveFields_pass0, "LOW")
}

record(ai, "$(SYS){$(D)-SFP}Speed:Link-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Link Speed")
  field(DESC, "Tranceiver Line Rate")
  field(HIGH, "10500")
  field(HSV , "MAJOR")
  field(LOW , "3000")
  field(LSV , "MAJOR")
  field(LOLO, "-0.1")
  field(LLSV, "INVALID")
  field(EGU , "Mb/s")
  field(PREC, "0")
  field(FLNK, "$(SYS){$(D)-SFP}Vendor-I")
}

record(stringin, "$(SYS){$(D)-SFP}Vendor-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Vendor name")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Vendor")
  field(FLNK, "$(SYS){$(D)-SFP}Part-I")
}

record(stringin, "$(SYS){$(D)-SFP}Part-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Vendor part number")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Part")
  field(FLNK, "$(SYS){$(D)-SFP}Rev-I")
}

record(stringin, "$(SYS){$(D)-SFP}Rev-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Vendor part revision")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Rev")
  field(FLNK, "$(SYS){$(D)-SFP}Serial-I")
}

record(stringin, "$(SYS){$(D)-SFP}Serial-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "SFP serial number")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Serial")
  field(FLNK, "$(SYS){$(D)-SFP}Date:Manu-I")
}

record(stringin, "$(SYS){$(D)-SFP}Date:Manu-I") {
  field(DTYP, "Obj Prop string")
  field(DESC, "Manufactored date")
  field(INP , "@OBJ=$(EVR):SFP, PROP=Date")
}
# Delay Compensation control/status

record(bo, "$(SYS){$(D)-DC}Ena-Sel") {
  field(DESC, "Apply DC correction")
  field(DTYP, "Obj Prop bool")
  field(OUT, "@OBJ=$(EVR), PROP=DCEnable")
  field(ZNAM, "Disable")
  field(ONAM, "Enable")
  field(PINI, "YES")
  field(PHAS, "1") # after Tgt-SP
  field(FLNK, "$(SYS){$(D)-DC}Ena-RB")
  info(autosaveFields_pass0, "VAL")
}
record(bi, "$(SYS){$(D)-DC}Ena-RB") {
  field(DESC, "Apply DC correction")
  field(DTYP, "Obj Prop bool")
  field(INP, "@OBJ=$(EVR), PROP=DCEnable")
  field(ZNAM, "Disable")
  field(ONAM, "Enable")
}

record(ao, "$(SYS){$(D)-DC}Tgt-SP") {
  field(DESC, "Desired total delay")
  field(DTYP, "Obj Prop double")
  field(OUT, "@OBJ=$(EVR), PROP=DCTarget")
  field(EGU, "ns")
    # a too small value will cause glitches and dropped events.
    # so we pick a conservative default suitable for the slowest 50MHz clock
  field(VAL, "110")
  field(PREC, "3")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-DC}Tgt-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}
record(ai, "$(SYS){$(D)-DC}Tgt-RB") {
  field(DESC, "Desired total delay")
  field(DTYP, "Obj Prop double")
  field(INP, "@OBJ=$(EVR), PROP=DCTarget")
  field(EGU, "ns")
  field(PREC, "3")
  info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}

record(ai, "$(SYS){$(D)-DC}Msrd-I") {
  field(DESC, "Measured total delay")
  field(DTYP, "Obj Prop double")
  field(INP, "@OBJ=$(EVR), PROP=DCRx")
  field(EGU, "ns")
  field(PREC, "3")
  field(SCAN, "1 second")
  field(FLNK, "$(SYS){$(D)-DC}Corr-I")
  info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}
record(ai, "$(SYS){$(D)-DC}Corr-I") {
  field(DESC, "delay correction")
  field(DTYP, "Obj Prop double")
  field(INP, "@OBJ=$(EVR), PROP=DCInt")
  field(EGU, "ns")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DC}Lck-Sts")
  info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}
record(bi, "$(SYS){$(D)-DC}Lck-Sts") {
  field(DTYP, "Obj Prop uint32")
  field(INP, "@OBJ=$(EVR), PROP=DCStatusRaw")
  field(MASK, "1")
  field(ZSV , "MAJOR")
  field(ZNAM, "Unlocked")
  field(ONAM, "Locked")
  field(FLNK, "$(SYS){$(D)-DC}LckTrk-Sts")
}
record(mbbi, "$(SYS){$(D)-DC}LckTrk-Sts") {
  field(DESC, "DC loop tracking")
  field(DTYP, "Obj Prop uint32")
  field(INP, "@OBJ=$(EVR), PROP=DCStatusRaw")
  field(MASK, "0xc")
  field(SHFT, "2")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Lock")
  field(ONST, "Short")
  field(TWST, "Long")
  field(THST, "Invalid")
  field(ONSV, "MAJOR")
  field(TWSV, "MAJOR")
  field(THSV, "INVALID")
  field(FLNK, "$(SYS){$(D)-DC}LckDat-Sts")
}
record(mbbi, "$(SYS){$(D)-DC}LckDat-Sts") {
  field(DESC, "DC data from master?")
  field(DTYP, "Obj Prop uint32")
  field(INP, "@OBJ=$(EVR), PROP=DCStatusRaw")
  field(MASK, "0x700")
  field(SHFT, "8")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(ZRST, "No Mstr")
  field(ONST, "Coarse")
  field(TWST, "Invalid")
  field(THST, "Medium")
  field(FRST, "Invalid")
  field(FVST, "Invalid")
  field(SXST, "Invalid")
  field(SVST, "Fine")
  field(ZRSV, "MAJOR")
  field(ONSV, "MINOR")
  field(TWSV, "INVALID")
  field(THSV, "MINOR")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(FLNK, "$(SYS){$(D)-DC}ID-I")
}
record(longin, "$(SYS){$(D)-DC}ID-I") {
  field(DESC, "Topology ID")
  field(DTYP, "Obj Prop uint32")
  field(INP, "@OBJ=$(EVR), PROP=DCTOPID")
}
# Control for mapping a function to an event code in hardware
#
# Macros:
#  NAME = record name
#  OBJ = EVR devObj name
#  func = Function to be mapped
#    Choices are: "FIFO", "Latch TS", "Blink", "Forward",
#                 "Stop Log", "Log", "Heartbeat", "Reset PS",
#                 "TS reset", "TS tick", "Shift 1", "Shift 0",
#
# Blink
#   An LED on the EVRs front panel will blink when the code is received.
#
# Forward
#   The received code will be immediately retransmits on the upstream event link.
#
# Stop Log
#   Freeze the circular event log buffer. An CPU interrupt will be raised which will cause the buffer to be downloaded. This might be a useful action to map to a fault event.
#
# Log
#   Include this event code in the circular event log.
#
# Heartbeat
#   This event resets the heartbeat timeout timer.
#
# Reset PS
#   Resets the phase of all prescalers.
#
# TS reset
#   Transfers the seconds timestamp from the shift register and zeros the sub-seconds part.
#
# TS tick
#   When the timestamp source is 'Mapped code' then any event with this mapping will cause the sub-seconds part of the timestamp to increment.
#
# Shift 1
#   Shifts the current value of the seconds timestamp shift register up by one bit and sets the low bit to 1.
#
# Shift 0
#   Shifts the current value of the seconds timestamp shift register up by one bit and sets the low bit to 0.
#
# FIFO
#   Bypass the automatic allocation mechanism and always include this code in the event FIFO.
#
record(longout, "$(SYS){$(D)}Evt:Blink0-SP") {
  field(DTYP, "EVR Mapping" )
  field(OUT , "@OBJ=$(EVR), Func=Blink")
  field(PINI, "YES")
  field(DESC, "Mapping for Blink")
  field(VAL , "15")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "OUT VAL")
}
# Control for mapping a function to an event code in hardware
#
# Macros:
#  NAME = record name
#  OBJ = EVR devObj name
#  func = Function to be mapped
#    Choices are: "FIFO", "Latch TS", "Blink", "Forward",
#                 "Stop Log", "Log", "Heartbeat", "Reset PS",
#                 "TS reset", "TS tick", "Shift 1", "Shift 0",
#
# Blink
#   An LED on the EVRs front panel will blink when the code is received.
#
# Forward
#   The received code will be immediately retransmits on the upstream event link.
#
# Stop Log
#   Freeze the circular event log buffer. An CPU interrupt will be raised which will cause the buffer to be downloaded. This might be a useful action to map to a fault event.
#
# Log
#   Include this event code in the circular event log.
#
# Heartbeat
#   This event resets the heartbeat timeout timer.
#
# Reset PS
#   Resets the phase of all prescalers.
#
# TS reset
#   Transfers the seconds timestamp from the shift register and zeros the sub-seconds part.
#
# TS tick
#   When the timestamp source is 'Mapped code' then any event with this mapping will cause the sub-seconds part of the timestamp to increment.
#
# Shift 1
#   Shifts the current value of the seconds timestamp shift register up by one bit and sets the low bit to 1.
#
# Shift 0
#   Shifts the current value of the seconds timestamp shift register up by one bit and sets the low bit to 0.
#
# FIFO
#   Bypass the automatic allocation mechanism and always include this code in the event FIFO.
#
record(longout, "$(SYS){$(D)}Evt:Blink1-SP") {
  field(DTYP, "EVR Mapping" )
  field(OUT , "@OBJ=$(EVR), Func=Blink")
  field(PINI, "YES")
  field(DESC, "Mapping for Blink")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "OUT VAL")
}
# Control for mapping a function to an event code in hardware
#
# Macros:
#  NAME = record name
#  OBJ = EVR devObj name
#  func = Function to be mapped
#    Choices are: "FIFO", "Latch TS", "Blink", "Forward",
#                 "Stop Log", "Log", "Heartbeat", "Reset PS",
#                 "TS reset", "TS tick", "Shift 1", "Shift 0",
#
# Blink
#   An LED on the EVRs front panel will blink when the code is received.
#
# Forward
#   The received code will be immediately retransmits on the upstream event link.
#
# Stop Log
#   Freeze the circular event log buffer. An CPU interrupt will be raised which will cause the buffer to be downloaded. This might be a useful action to map to a fault event.
#
# Log
#   Include this event code in the circular event log.
#
# Heartbeat
#   This event resets the heartbeat timeout timer.
#
# Reset PS
#   Resets the phase of all prescalers.
#
# TS reset
#   Transfers the seconds timestamp from the shift register and zeros the sub-seconds part.
#
# TS tick
#   When the timestamp source is 'Mapped code' then any event with this mapping will cause the sub-seconds part of the timestamp to increment.
#
# Shift 1
#   Shifts the current value of the seconds timestamp shift register up by one bit and sets the low bit to 1.
#
# Shift 0
#   Shifts the current value of the seconds timestamp shift register up by one bit and sets the low bit to 0.
#
# FIFO
#   Bypass the automatic allocation mechanism and always include this code in the event FIFO.
#
record(longout, "$(SYS){$(D)}Evt:ResetPS-SP") {
  field(DTYP, "EVR Mapping" )
  field(OUT , "@OBJ=$(EVR), Func=Reset PS")
  field(PINI, "YES")
  field(DESC, "Mapping for Reset PS")
  field(VAL , "123")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "OUT VAL")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}Pps-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=0x7d")
  field(VAL , "125")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}PpsCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}PpsCnt-I") {
  field(SDIS, "$(SYS){$(D)}Pps-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}PpsCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}Pps-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtA-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=10")
  field(VAL , "10")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtACnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtACnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtA-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtACnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtA-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtB-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=11")
  field(VAL , "11")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtBCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtBCnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtB-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtBCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtB-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtC-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=12")
  field(VAL , "12")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtCCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtCCnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtC-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtCCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtC-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtD-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=13")
  field(VAL , "13")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtDCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtDCnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtD-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtDCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtD-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtE-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=14")
  field(VAL , "14")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtECnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtECnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtE-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtECnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtE-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtF-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=15")
  field(VAL , "15")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtFCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtFCnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtF-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtFCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtF-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtG-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=16")
  field(VAL , "16")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtGCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtGCnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtG-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtGCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtG-SP.TIME")
}
# Mapping between hardware event code and a software database event
#
# Macros:
#  EN = record name prefix
#  OBJ = EVR devObj name
#  CODE = Event code (hardware)
#  EVNT = Database event code (software)
#

# EVT  - Timing hardware event code
# ENUM - EPICS DB event number
record(longout, "$(SYS){$(D)}EvtH-SP") {
  field(DTYP, "EVR Event")
  field(SCAN, "I/O Intr")
  field(OUT , "@OBJ=$(EVR),Code=17")
  field(VAL , "17")
  field(TSE , "-2") # from device support
  field(FLNK, "$(SYS){$(D)}EvtHCnt-I")
  info(autosaveFields_pass0, "OUT VAL")
}

record(calc, "$(SYS){$(D)}EvtHCnt-I") {
  field(SDIS, "$(SYS){$(D)}EvtH-SP")
  field(DISV, "0")
  field(CALC, "A+1")
  field(INPA, "$(SYS){$(D)}EvtHCnt-I NPP")
  field(TSEL, "$(SYS){$(D)}EvtH-SP.TIME")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:0}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 0")
  field(OUT , "@OBJ=$(EVR):PS0, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:0}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:0}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 0")
  field(INP , "@OBJ=$(EVR):PS0, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:0}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:0}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:0}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:0}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:0}PhasOffs-SP") {
  field(DESC, "Prescaler 0 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:0}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:0}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:0}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:0}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:0}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:0}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 0 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS0, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:0}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:0}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 0 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS0, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:0}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:0}PhasOffs-RB") {
  field(DESC, "Prescaler 0 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:0}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:0}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:1}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 1")
  field(OUT , "@OBJ=$(EVR):PS1, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:1}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:1}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 1")
  field(INP , "@OBJ=$(EVR):PS1, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:1}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:1}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:1}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:1}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:1}PhasOffs-SP") {
  field(DESC, "Prescaler 1 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:1}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:1}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:1}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:1}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:1}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:1}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 1 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS1, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:1}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:1}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 1 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS1, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:1}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:1}PhasOffs-RB") {
  field(DESC, "Prescaler 1 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:1}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:1}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:2}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 2")
  field(OUT , "@OBJ=$(EVR):PS2, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:2}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:2}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 2")
  field(INP , "@OBJ=$(EVR):PS2, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:2}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:2}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:2}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:2}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:2}PhasOffs-SP") {
  field(DESC, "Prescaler 2 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:2}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:2}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:2}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:2}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:2}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:2}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 2 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS2, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:2}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:2}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 2 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS2, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:2}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:2}PhasOffs-RB") {
  field(DESC, "Prescaler 2 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:2}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:2}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:3}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 3")
  field(OUT , "@OBJ=$(EVR):PS3, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:3}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:3}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 3")
  field(INP , "@OBJ=$(EVR):PS3, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:3}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:3}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:3}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:3}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:3}PhasOffs-SP") {
  field(DESC, "Prescaler 3 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:3}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:3}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:3}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:3}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:3}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:3}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 3 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS3, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:3}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:3}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 3 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS3, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:3}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:3}PhasOffs-RB") {
  field(DESC, "Prescaler 3 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:3}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:3}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:4}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 4")
  field(OUT , "@OBJ=$(EVR):PS4, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:4}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:4}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 4")
  field(INP , "@OBJ=$(EVR):PS4, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:4}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:4}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:4}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:4}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:4}PhasOffs-SP") {
  field(DESC, "Prescaler 4 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:4}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:4}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:4}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:4}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:4}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:4}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 4 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS4, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:4}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:4}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 4 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS4, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:4}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:4}PhasOffs-RB") {
  field(DESC, "Prescaler 4 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:4}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:4}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:5}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 5")
  field(OUT , "@OBJ=$(EVR):PS5, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:5}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:5}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 5")
  field(INP , "@OBJ=$(EVR):PS5, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:5}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:5}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:5}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:5}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:5}PhasOffs-SP") {
  field(DESC, "Prescaler 5 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:5}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:5}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:5}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:5}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:5}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:5}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 5 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS5, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:5}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:5}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 5 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS5, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:5}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:5}PhasOffs-RB") {
  field(DESC, "Prescaler 5 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:5}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:5}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:6}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 6")
  field(OUT , "@OBJ=$(EVR):PS6, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:6}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:6}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 6")
  field(INP , "@OBJ=$(EVR):PS6, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:6}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:6}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:6}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:6}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:6}PhasOffs-SP") {
  field(DESC, "Prescaler 6 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:6}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:6}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:6}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:6}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:6}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:6}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 6 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS6, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:6}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:6}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 6 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS6, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:6}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:6}PhasOffs-RB") {
  field(DESC, "Prescaler 6 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:6}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:6}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's programable frequency divider
#
# Macros:
#  SN = scaler record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  IDX = ID # corresponding to output mapping codes
#  MAX = Maximum division

record(bo, "$(SYS){$(D)}PSPolarity-Sel")
{
  field(DTYP, "Obj Prop bool")
  field(DESC, "Polarity of all prescalers")
  field(OUT , "@OBJ=$(EVR), PROP=PSPolarity")
  field(PINI, "YES")
  field(ZNAM, "PS-sync on falling edge")
  field(ONAM, "PS-sync on rising edge")
  field(VAL , "0")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-PS:7}Div-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 7")
  field(OUT , "@OBJ=$(EVR):PS7, PROP=Divide")
  field(PINI, "YES")
  field(VAL , "2")
  field(HOPR, "0xffffffff")
  field(LOPR, "2")
  field(DRVH, "0xffffffff")
  field(DRVL, "2")
  field(FLNK, "$(SYS){$(D)-PS:7}Div-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:7}Div-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 7")
  field(INP , "@OBJ=$(EVR):PS7, PROP=Divide")
  field(FLNK, "$(SYS){$(D)-PS:7}Rate-I")
}

record(calc, "$(SYS){$(D)-PS:7}Rate-I") {
  field(DESC, "Output frequency")
  field(INPA, "$(SYS){$(D)-PS:7}Div-RB NPP")
  field(INPB, "$(SYS){$(D)}Link:Clk-I CP")
  field(CALC, "B/A")
  field(EGU, "MHz")
  field(PREC, "2")
}

record(waveform, "$(SYS){$(D)-PS:7}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

record(ao, "$(SYS){$(D)-PS:7}PhasOffs-SP") {
  field(DESC, "Prescaler 7 Phase Offset")
  field(EGU , "Deg")
  field(OMSL, "supervisory")
  field(HOPR, "359.9999999999")
  field(LOPR, "0")
  field(DRVH, "359.9999999999")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:7}PhasOffs-CO_")
}

record(calcout, "$(SYS){$(D)-PS:7}PhasOffs-CO_") {
  field(ASG, "private")
  field(DESC, "Degrees to Event Clock Ticks")
  field(OUT , "$(SYS){$(D)-PS:7}PhasOffs:Raw-SP PP")
  field(CALC, "FLOOR(B/360*A)")
  field(INPA, "$(SYS){$(D)-PS:7}Div-RB")
  field(INPB, "$(SYS){$(D)-PS:7}PhasOffs-SP")
}

record(longout, "$(SYS){$(D)-PS:7}PhasOffs:Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 7 Phase Offset")
  field(OUT , "@OBJ=$(EVR):PS7, PROP=Phase Offset")
  field(PINI, "YES")
  field(VAL , "0")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(DRVH, "0xffffffff")
  field(DRVL, "0")
  field(FLNK, "$(SYS){$(D)-PS:7}PhasOffs:Raw-RB")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-PS:7}PhasOffs:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Prescaler 7 Phase Offset")
  field(INP , "@OBJ=$(EVR):PS7, PROP=Phase Offset")
  field(PINI, "YES")
  field(FLNK, "$(SYS){$(D)-PS:7}PhasOffs-RB")
}

record(calc, "$(SYS){$(D)-PS:7}PhasOffs-RB") {
  field(DESC, "Prescaler 7 Phase Offset")
  field(CALC, "B/A*360")
  field(EGU , "Deg")
  field(INPA, "$(SYS){$(D)-PS:7}Div-RB CPP")
  field(INPB, "$(SYS){$(D)-PS:7}PhasOffs:Raw-RB PP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:Int}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output Internal")
  field(OUT , "@OBJ=$(EVR):Int, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:Int}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Internal")
  field(OUT , "@OBJ=$(EVR):Int, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:Int}Src-RB_")
  field(PINI, "YES")
  field(VAL , "63") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:Int}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Internal")
  field(OUT , "@OBJ=$(EVR):Int, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:Int}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "63") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:Int}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:Int}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:Int}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:Int}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Internal")
  field(INP , "@OBJ=$(EVR):Int, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:Int}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:Int}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Internal")
  field(INP , "@OBJ=$(EVR):Int, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:Int}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:Int}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:Int}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:Int}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:Int}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:Int}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:Int}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB00}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV0")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut0, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB00}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV0")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut0, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB00}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB00}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV0")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut0, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB00}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB00}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB00}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB00}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB00}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV0")
  field(INP , "@OBJ=$(EVR):FrontUnivOut0, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB00}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB00}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV0")
  field(INP , "@OBJ=$(EVR):FrontUnivOut0, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB00}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB00}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB00}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB00}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB00}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB00}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB00}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB01}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV1")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut1, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB01}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV1")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut1, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB01}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB01}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV1")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut1, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB01}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB01}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB01}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB01}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB01}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV1")
  field(INP , "@OBJ=$(EVR):FrontUnivOut1, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB01}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB01}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV1")
  field(INP , "@OBJ=$(EVR):FrontUnivOut1, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB01}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB01}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB01}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB01}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB01}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB01}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB01}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB02}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV2")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut2, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB02}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV2")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut2, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB02}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB02}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV2")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut2, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB02}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB02}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB02}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB02}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB02}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV2")
  field(INP , "@OBJ=$(EVR):FrontUnivOut2, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB02}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB02}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV2")
  field(INP , "@OBJ=$(EVR):FrontUnivOut2, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB02}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB02}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB02}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB02}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB02}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB02}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB02}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB03}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV3")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut3, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB03}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV3")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut3, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB03}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB03}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV3")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut3, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB03}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB03}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB03}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB03}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB03}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV3")
  field(INP , "@OBJ=$(EVR):FrontUnivOut3, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB03}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB03}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV3")
  field(INP , "@OBJ=$(EVR):FrontUnivOut3, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB03}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB03}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB03}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB03}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB03}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB03}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB03}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB04}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV4")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut4, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB04}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV4")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut4, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB04}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB04}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV4")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut4, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB04}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB04}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB04}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB04}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB04}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV4")
  field(INP , "@OBJ=$(EVR):FrontUnivOut4, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB04}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB04}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV4")
  field(INP , "@OBJ=$(EVR):FrontUnivOut4, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB04}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB04}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB04}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB04}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB04}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB04}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB04}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB05}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV5")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut5, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB05}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV5")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut5, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB05}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB05}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV5")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut5, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB05}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB05}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB05}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB05}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB05}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV5")
  field(INP , "@OBJ=$(EVR):FrontUnivOut5, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB05}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB05}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV5")
  field(INP , "@OBJ=$(EVR):FrontUnivOut5, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB05}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB05}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB05}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB05}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB05}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB05}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB05}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB06}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV6")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut6, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB06}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV6")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut6, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB06}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB06}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV6")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut6, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB06}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB06}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB06}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB06}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB06}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV6")
  field(INP , "@OBJ=$(EVR):FrontUnivOut6, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB06}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB06}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV6")
  field(INP , "@OBJ=$(EVR):FrontUnivOut6, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB06}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB06}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB06}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB06}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB06}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB06}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB06}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB07}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV7")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut7, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB07}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV7")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut7, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB07}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB07}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV7")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut7, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB07}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB07}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB07}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB07}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB07}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV7")
  field(INP , "@OBJ=$(EVR):FrontUnivOut7, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB07}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB07}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV7")
  field(INP , "@OBJ=$(EVR):FrontUnivOut7, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB07}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB07}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB07}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB07}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB07}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB07}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB07}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB08}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV8")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut8, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB08}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV8")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut8, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB08}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB08}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV8")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut8, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB08}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB08}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB08}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB08}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB08}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV8")
  field(INP , "@OBJ=$(EVR):FrontUnivOut8, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB08}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB08}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV8")
  field(INP , "@OBJ=$(EVR):FrontUnivOut8, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB08}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB08}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB08}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB08}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB08}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB08}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB08}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB09}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV9")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut9, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB09}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV9")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut9, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB09}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB09}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV9")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut9, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB09}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB09}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB09}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB09}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB09}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV9")
  field(INP , "@OBJ=$(EVR):FrontUnivOut9, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB09}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB09}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV9")
  field(INP , "@OBJ=$(EVR):FrontUnivOut9, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB09}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB09}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB09}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB09}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB09}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB09}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB09}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB10}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV10")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut10, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB10}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV10")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut10, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB10}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB10}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV10")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut10, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB10}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB10}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB10}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB10}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB10}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV10")
  field(INP , "@OBJ=$(EVR):FrontUnivOut10, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB10}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB10}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV10")
  field(INP , "@OBJ=$(EVR):FrontUnivOut10, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB10}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB10}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB10}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB10}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB10}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB10}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB10}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB11}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV11")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut11, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB11}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV11")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut11, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB11}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB11}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV11")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut11, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB11}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB11}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB11}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB11}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB11}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV11")
  field(INP , "@OBJ=$(EVR):FrontUnivOut11, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB11}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB11}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV11")
  field(INP , "@OBJ=$(EVR):FrontUnivOut11, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB11}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB11}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB11}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB11}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB11}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB11}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB11}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB12}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV12")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut12, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB12}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV12")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut12, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB12}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB12}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV12")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut12, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB12}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB12}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB12}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB12}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB12}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV12")
  field(INP , "@OBJ=$(EVR):FrontUnivOut12, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB12}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB12}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV12")
  field(INP , "@OBJ=$(EVR):FrontUnivOut12, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB12}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB12}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB12}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB12}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB12}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB12}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB12}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB13}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV13")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut13, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB13}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV13")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut13, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB13}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB13}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV13")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut13, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB13}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB13}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB13}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB13}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB13}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV13")
  field(INP , "@OBJ=$(EVR):FrontUnivOut13, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB13}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB13}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV13")
  field(INP , "@OBJ=$(EVR):FrontUnivOut13, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB13}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB13}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB13}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB13}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB13}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB13}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB13}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB14}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV14")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut14, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB14}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV14")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut14, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB14}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB14}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV14")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut14, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB14}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB14}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB14}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB14}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB14}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV14")
  field(INP , "@OBJ=$(EVR):FrontUnivOut14, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB14}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB14}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV14")
  field(INP , "@OBJ=$(EVR):FrontUnivOut14, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB14}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB14}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB14}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB14}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB14}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB14}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB14}User-SP")
}
# Record set for an EVR's physical output
#
# Macros:
#  ON = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack


record(bo, "$(SYS){$(D)-Out:RB15}Ena-SP") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output UNIV15")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut15, PROP=Enable")
  field(PINI, "YES")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(VAL , "1") # Default to enabled
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-Out:RB15}Src-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV15")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut15, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB15}Src-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

record(longout, "$(SYS){$(D)-Out:RB15}Src2-SP") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV15")
  field(OUT , "@OBJ=$(EVR):FrontUnivOut15, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB15}Src2-RB_")
  field(PINI, "YES")
  field(VAL , "61") # default DEFAULT is Force Low
  info(autosaveFields_pass0, "VAL HOPR LOPR DRVH DRVL")
}

# Settings
# Users use will set one of these at a time.

record(mbbo, "$(SYS){$(D)-Out:RB15}Src:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src2:Pulse-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src2-SP PP")
  field(ZRST, "Pulser 0")
  field(ONST, "Pulser 1")
  field(TWST, "Pulser 2")
  field(THST, "Pulser 3")
  field(FRST, "Pulser 4")
  field(FVST, "Pulser 5")
  field(SXST, "Pulser 6")
  field(SVST, "Pulser 7")
  field(EIST, "Pulser 8")
  field(NIST, "Pulser 9")
  field(TEST, "Pulser 10")
  field(ELST, "Pulser 11")
  field(TVST, "Pulser 12")
  field(TTST, "Pulser 13")
  field(FTST, "Pulser 14")
  field(FFST, "Pulser 15")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(FFVL, "15")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src2:Pulse2-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src2-SP PP")
  field(ZRST, "Pulser 16")
  field(ONST, "Pulser 17")
  field(TWST, "Pulser 18")
  field(THST, "Pulser 19")
  field(FRST, "Pulser 20")
  field(FVST, "Pulser 21")
  field(SXST, "Pulser 22")
  field(SVST, "Pulser 23")
  field(ZRVL, "16")
  field(ONVL, "17")
  field(TWVL, "18")
  field(THVL, "19")
  field(FRVL, "20")
  field(FVVL, "21")
  field(SXVL, "22")
  field(SVVL, "23")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src2:DBus-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src2-SP PP")
  field(ZRST, "DBus 0")
  field(ONST, "DBus 1")
  field(TWST, "DBus 2")
  field(THST, "DBus 3")
  field(FRST, "DBus 4")
  field(FVST, "DBus 5")
  field(SXST, "DBus 6")
  field(SVST, "DBus 7")
  field(ZRVL, "32")
  field(ONVL, "33")
  field(TWVL, "34")
  field(THVL, "35")
  field(FRVL, "36")
  field(FVVL, "37")
  field(SXVL, "38")
  field(SVVL, "39")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src2:Scale-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src2-SP PP")
  field(ZRST, "Prescaler 0")
  field(ONST, "Prescaler 1")
  field(TWST, "Prescaler 2")
  field(THST, "Prescaler 3")
  field(FRST, "Prescaler 4")
  field(FVST, "Prescaler 5")
  field(SXST, "Prescaler 6")
  field(SVST, "Prescaler 7")
  field(ZRVL, "40")
  field(ONVL, "41")
  field(TWVL, "42")
  field(THVL, "43")
  field(FRVL, "44")
  field(FVVL, "45")
  field(SXVL, "46")
  field(SVVL, "47")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-Out:RB15}Src2:Gate-SP") {
  field(DTYP, "Raw Soft Channel")
  field(OUT , "$(SYS){$(D)-Out:RB15}Src2-SP PP")
  field(ZRST, "Flip-flop 0")
  field(ONST, "Flip-flop 1")
  field(TWST, "Flip-flop 2")
  field(THST, "Flip-flop 3")
  field(FRST, "Flip-flop 4")
  field(FVST, "Flip-flop 5")
  field(SXST, "Flip-flop 6")
  field(SVST, "Flip-flop 7")
  field(EIST, "Tri-state")
  field(NIST, "Force High")
  field(TEST, "Force Low")
  field(ZRVL, "48")
  field(ONVL, "49")
  field(TWVL, "50")
  field(THVL, "51")
  field(FRVL, "52")
  field(FVVL, "53")
  field(SXVL, "54")
  field(SVVL, "55")
  field(EIVL, "61")
  field(NIVL, "62")
  field(TEVL, "63")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Mapping readback

record(longin, "$(SYS){$(D)-Out:RB15}Src-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV15")
  field(INP , "@OBJ=$(EVR):FrontUnivOut15, PROP=Map")
  field(FLNK, "$(SYS){$(D)-Out:RB15}Src-RB")
}

record(longin, "$(SYS){$(D)-Out:RB15}Src2-RB_") {
  field(ASG, "private")
  field(DTYP, "Obj Prop uint32")
  field(DESC, "UNIV15")
  field(INP , "@OBJ=$(EVR):FrontUnivOut15, PROP=Map2")
  field(FLNK, "$(SYS){$(D)-Out:RB15}Src2-RB")
}

record(stringin, "$(SYS){$(D)-Out:RB15}Src-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB15}Src-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

record(stringin, "$(SYS){$(D)-Out:RB15}Src2-RB")
{
  field(DTYP, "LUT uint32 -> string")
  field(INP, "$(SYS){$(D)-Out:RB15}Src2-RB_")
  info(lut0 , " 0  = Pulser 0")
  info(lut1 , " 1  = Pulser 1")
  info(lut2 , " 2  = Pulser 2")
  info(lut3 , " 3  = Pulser 3")
  info(lut4 , " 4  = Pulser 4")
  info(lut5 , " 5  = Pulser 5")
  info(lut6 , " 6  = Pulser 6")
  info(lut7 , " 7  = Pulser 7")
  info(lut8 , " 8  = Pulser 8")
  info(lut9 , " 9  = Pulser 9")
  info(lutA , " 10 = Pulser 10")
  info(lutB , " 11 = Pulser 11")
  info(lutC , " 12 = Pulser 12")
  info(lutD , " 13 = Pulser 13")
  info(lutE , " 14 = Pulser 14")
  info(lutF , " 15 = Pulser 15")
  info(lutG , " 16 = Pulser 16")
  info(lutH , " 17 = Pulser 17")
  info(lutI , " 18 = Pulser 18")
  info(lutJ , " 19 = Pulser 19")
  info(lutK , " 20 = Pulser 20")
  info(lutL , " 21 = Pulser 21")
  info(lutM , " 22 = Pulser 22")
  info(lutN , " 23 = Pulser 23")
  info(lutO , " 32 = DBus 0")
  info(lutP , " 33 = DBus 1")
  info(lutQ , " 34 = DBus 2")
  info(lutR , " 35 = DBus 3")
  info(lutS , " 36 = DBus 4")
  info(lutT , " 37 = DBus 5")
  info(lutU , " 38 = DBus 6")
  info(lutV , " 39 = DBus 7")
  info(lutW , " 40 = Prescaler 0")
  info(lutX , " 41 = Prescaler 1")
  info(lutY , " 42 = Prescaler 2")
  info(lutZ , " 43 = Prescaler 3")
  info(lutAA, " 44 = Prescaler 4")
  info(lutAB, " 45 = Prescaler 5")
  info(lutAC, " 46 = Prescaler 6")
  info(lutAD, " 47 = Prescaler 7")
  info(lutAE, " 48 = Flip-flop 0")
  info(lutAF, " 49 = Flip-flop 1")
  info(lutAG, " 50 = Flip-flop 2")
  info(lutAH, " 51 = Flip-flop 3")
  info(lutAI, " 52 = Flip-flop 4")
  info(lutAJ, " 53 = Flip-flop 5")
  info(lutAK, " 54 = Flip-flop 6")
  info(lutAL, " 55 = Flip-flop 7")
  info(lutAM, " 61 = Tri-state")
  info(lutAN, " 62 = Force high")
  info(lutAO, " 63 = Force low")
}

# Select which is displayed

record(waveform, "$(SYS){$(D)-Out:RB15}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-Out:RB15}User-SP")
}
# EVR "internal" (software) mapped output state

record(bi, "$(SYS){$(D)-Out:Int}State-Sts") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Output State")
  field(INP , "@OBJ=$(EVR), PROP=SW Output status")
  field(SCAN, ".1 second")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:0}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:0}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:0}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:0}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:0}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 0")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:0}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:0}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:0}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:0}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:0}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:0}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:0}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:0}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:0}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:0}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:0}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:0}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:0}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:0}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:0}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:0}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:0}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:1}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:1}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:1}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:1}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:1}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 1")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:1}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:1}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:1}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:1}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:1}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:1}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:1}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:1}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:1}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:1}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:1}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:1}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:1}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:1}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:1}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:1}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:1}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:2}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:2}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:2}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:2}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:2}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 2")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:2}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:2}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:2}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:2}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:2}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:2}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:2}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:2}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:2}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:2}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:2}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:2}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:2}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:2}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:2}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:2}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:2}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:3}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:3}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:3}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:3}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:3}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 3")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:3}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:3}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:3}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:3}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:3}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:3}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(DRVH, "0xffff")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Prescaler-RB")
  field(DISP, "0")
  field(DISA, "0")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:3}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Prescaler")
  field(HOPR, "0xffff")
  field(LOPR, "1")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:3}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:3}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:3}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:3}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:3}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:3}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:3}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:3}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:3}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:3}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:4}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:4}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:4}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:4}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:4}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 4")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:4}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:4}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:4}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:4}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:4}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:4}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:4}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:4}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:4}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:4}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:4}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:4}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:4}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:4}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:4}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:4}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:4}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:5}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:5}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:5}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:5}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:5}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 5")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:5}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:5}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:5}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:5}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:5}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:5}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:5}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:5}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:5}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:5}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:5}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:5}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:5}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:5}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:5}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:5}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:5}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:6}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:6}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:6}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:6}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:6}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 6")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:6}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:6}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:6}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:6}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:6}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:6}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:6}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:6}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:6}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:6}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:6}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:6}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:6}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:6}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:6}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:6}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:6}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:7}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:7}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:7}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:7}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:7}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 7")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:7}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:7}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:7}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:7}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:7}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:7}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:7}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:7}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:7}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:7}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:7}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:7}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:7}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:7}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:7}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:7}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:7}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:8}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:8}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:8}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:8}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:8}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 8")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:8}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:8}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:8}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:8}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:8}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:8}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:8}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:8}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:8}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:8}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:8}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:8}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:8}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:8}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:8}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:8}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:8}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:9}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:9}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:9}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:9}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:9}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 9")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:9}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:9}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:9}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:9}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:9}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:9}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:9}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:9}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:9}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:9}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:9}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:9}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:9}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:9}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:9}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:9}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:9}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:10}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:10}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:10}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:10}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:10}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 10")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:10}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:10}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:10}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:10}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:10}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:10}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:10}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:10}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:10}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:10}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:10}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:10}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:10}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:10}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:10}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:10}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:10}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:11}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:11}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:11}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:11}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:11}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 11")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:11}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:11}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:11}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:11}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:11}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:11}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:11}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:11}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:11}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:11}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:11}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:11}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:11}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:11}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:11}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:11}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:11}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:12}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:12}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:12}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:12}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:12}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 12")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:12}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:12}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:12}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:12}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:12}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:12}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:12}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:12}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:12}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:12}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:12}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:12}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:12}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:12}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:12}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:12}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:12}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:13}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:13}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:13}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:13}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:13}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 13")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:13}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:13}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:13}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:13}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:13}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:13}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:13}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:13}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:13}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:13}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:13}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:13}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:13}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:13}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:13}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:13}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:13}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:14}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:14}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:14}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:14}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:14}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 14")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:14}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:14}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:14}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:14}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:14}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:14}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:14}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:14}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:14}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:14}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:14}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:14}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:14}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:14}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:14}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:14}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:14}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:15}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:15}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:15}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:15}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:15}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 15")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:15}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:15}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:15}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:15}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:15}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:15}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:15}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:15}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:15}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:15}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:15}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:15}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:15}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:15}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:15}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:15}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:15}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:28}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:28}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:28}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:28}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:28}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 28")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:28}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:28}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:28}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:28}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:28}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:28}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:28}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:28}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:28}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:28}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:28}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:28}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:28}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:28}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:28}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:28}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul28, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:28}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:28}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul28, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:29}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:29}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:29}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:29}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:29}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 29")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:29}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:29}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:29}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:29}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:29}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:29}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:29}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:29}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:29}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:29}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:29}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:29}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:29}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:29}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:29}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:29}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul29, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:29}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:29}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul29, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:30}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:30}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:30}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:30}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:30}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 30")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:30}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:30}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:30}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:30}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:30}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:30}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:30}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:30}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:30}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:30}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:30}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:30}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:30}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:30}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:30}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:30}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul30, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:30}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:30}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul30, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's programmable pulse generator
#
# Macros:
#  PN = delaygen record name prefix
#  P  = base record name prefix
#  OBJ = devObj name
#  PID = Pulse gen ID number (corresponds to output mappings)
#  DMAX = Max delay setting
#  WMAX = Max width setting
#  PMAX = Max prescaler (divider) setting
#  NOPS = 0 - enable prescaler, 1 - disable prescaler

# When Disabled, the output of the Pulse Generator will remain in
# its inactive state (normally low). The generator must be enabled
# before mapped actions take effect.
#
record(bo, "$(SYS){$(D)-DlyGen:31}Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=Enable")
  field(PINI, "YES")
  field(VAL , "1")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  info(autosaveFields_pass0, "VAL")
}

# Pulser Soft set/reset
record(bo, "$(SYS){$(D)-DlyGen:31}Set-Cmd") {
  field(DESC, "Soft set")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=SoftSet")
}

record(bo, "$(SYS){$(D)-DlyGen:31}Reset-Cmd") {
  field(DESC, "Soft reset")
  field(DTYP, "Obj Prop command")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=SoftReset")
}

# Reverses the output polarity. When set, changes the Pulse Generator's
# output from normally low to normally high.
#
record(bo, "$(SYS){$(D)-DlyGen:31}Polarity-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=Polarity")
  field(PINI, "YES")
  field(VAL , "0")
  field(MASK, "1")
  field(ZNAM, "Active High")
  field(ONAM, "Active Low")
  info(autosaveFields_pass0, "VAL")
}

# Determines the time between when the Pulse Generator is triggered
# and when it changes state from inactive to active (normally low to high).
record(ao, "$(SYS){$(D)-DlyGen:31}Delay-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=Delay")
  field(PINI, "YES")
  field(DESC, "Pulse Generator 31")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Delay-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:31}Delay-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=Delay")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Delay:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:31}Delay:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=Delay")
  field(EGU , "cnts")
  field(HOPR, "0xffffffff")
  field(LOPR, "0")
  field(HIGH, "0xffffffff")
  field(HSV, "MAJOR")
}

# Determines the time between when the Pulse Generator changes state from
# inactive to active (normally low to high), and when it changes back to inactive.
#
record(ao, "$(SYS){$(D)-DlyGen:31}Width-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=Width")
  field(PINI, "YES")
  field(DESC, "Pulser pulse width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Width-RB")
  info(autosaveFields_pass0, "VAL EGU ESLO PREC HOPR LOPR DRVL DRVH")
}

record(ai, "$(SYS){$(D)-DlyGen:31}Width-RB") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=Width")
  field(VAL , "0")
  field(EGU , "us")
  field(LINR, "LINEAR")
  field(ESLO, "1e6")
  field(PREC, "3")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Width:Raw-RB")
}

record(longin, "$(SYS){$(D)-DlyGen:31}Width:Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=Width")
  field(PINI, "YES")
  field(HOPR, "0xffff")
  field(LOPR, "0")
  field(HIGH, "0xffff")
  field(HSV, "MAJOR")
}

# Decreases the resolution of both delay and width by an integer multiple.
#
# Achieves greater range at the expense of resolution.
#
record(longout, "$(SYS){$(D)-DlyGen:31}Prescaler-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=Prescaler")
  field(DESC, "Pulser prescaler")
  field(PINI, "YES")
  field(HOPR, "1")
  field(LOPR, "1")
  field(DRVH, "1")
  field(DRVL, "1")
  field(VAL , "1")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Prescaler-RB")
  field(DISP, "1")
  field(DISA, "1")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS){$(D)-DlyGen:31}Prescaler-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=Prescaler")
  field(HOPR, "1")
  field(LOPR, "1")
  field(HIGH, "1")
  field(HSV, "MAJOR")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Res-I")
}

record(calc, "$(SYS){$(D)-DlyGen:31}Res-I") {
  field(DESC, "Effective resolution")
  field(INPA, "$(SYS){$(D)-DlyGen:31}Prescaler-RB MS")
  field(INPB, "$(SYS){$(D)}Link:ClkPeriod-I CP")
  field(CALC, "1e9*(A?A:1)*B")
  field(EGU, "ns")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}Res-FO_")
}

record(fanout, "$(SYS){$(D)-DlyGen:31}Res-FO_") {
  field(ASG, "private")
  field(DESC, "Clock change resync")
  field(LNK1, "$(SYS){$(D)-DlyGen:31}Delay-SP")
  field(LNK2, "$(SYS){$(D)-DlyGen:31}Width-SP")
}

record(waveform, "$(SYS){$(D)-DlyGen:31}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
}

# Triger pulser generator by one or more prescalers
record(mbboDirect, "$(SYS){$(D)-DlyGen:31}PSTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}PSTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:31}PSTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=PSTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}

# Trigger pulser generator by one or more DBus bits
record(mbboDirect, "$(SYS){$(D)-DlyGen:31}DBusTrig-Sel")
{
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul31, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:31}DBusTrig-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:31}DBusTrig-RB")
{
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul31, PROP=DBusTrig")
  field(PINI, "YES")
  field(NOBT, "8")
  info(autosaveFields_pass0, "RVAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:0}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul0, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 0")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:0}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul0, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 0")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:0}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul0, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 0")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:1}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul1, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 1")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:1}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul1, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 1")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:1}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul1, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 1")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:2}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul2, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 2")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:2}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul2, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 2")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:2}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul2, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 2")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:3}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul3, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 3")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:3}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul3, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 3")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:3}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul3, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 3")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:4}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul4, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 4")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:4}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul4, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 4")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:4}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul4, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 4")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:5}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul5, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 5")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:5}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul5, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 5")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:5}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul5, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 5")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:6}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul6, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 6")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:6}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul6, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 6")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:6}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul6, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 6")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:7}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul7, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 7")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:7}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul7, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 7")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:7}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul7, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 7")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:8}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul8, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 8")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:8}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul8, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 8")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:8}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul8, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 8")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:9}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul9, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 9")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:9}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul9, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 9")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:9}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul9, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 9")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:10}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul10, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 10")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:10}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul10, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 10")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:10}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul10, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 10")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:11}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul11, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 11")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:11}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul11, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 11")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:11}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul11, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 11")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:12}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul12, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 12")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:12}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul12, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 12")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:12}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul12, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 12")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:13}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul13, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 13")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:13}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul13, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 13")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:13}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul13, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 13")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:14}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul14, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 14")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:14}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul14, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 14")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:14}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul14, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 14")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:15}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul15, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 15")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:15}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul15, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 15")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:15}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul15, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 15")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:28}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul28, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 28")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:28}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul28, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 28")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:28}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul28, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 28")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:29}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul29, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 29")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:29}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul29, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 29")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:29}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul29, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 29")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:30}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul30, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 30")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:30}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul30, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 30")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:30}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul30, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 30")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:31}Evt:Trig0-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul31, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 31")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:31}Evt:Trig1-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul31, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 31")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
# Control for mapping a pulse geneator to an event code in hardware
#
# Macros:
#  NAME = record name
#  PID = Pulder ID #
#  OBJ = EVR devObj name
#  F = Pulse generator action
#    Choices are: "Trig", "Set", "Reset"
#  EVT = Initial event code
#

record(longout, "$(SYS){$(D)-DlyGen:31}Evt:Trig2-SP") {
  field(DTYP, "EVR Pulser Mapping" )
  field(OUT , "@OBJ=$(EVR):Pul31, Func=Trig")
  field(PINI, "YES")
  field(DESC, "Mapping for Pulser 31")
  field(VAL , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:0}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:0}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:0}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul0, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:0}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:0}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul0, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:1}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:1}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:1}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul1, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:1}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:1}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul1, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:2}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:2}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:2}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul2, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:2}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:2}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul2, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:3}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:3}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:3}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul3, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:3}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:3}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul3, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:4}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:4}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:4}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul4, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:4}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:4}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul4, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:5}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:5}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:5}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul5, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:5}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:5}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul5, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:6}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:6}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:6}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul6, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:6}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:6}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul6, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:7}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:7}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:7}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul7, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:7}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:7}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul7, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:8}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:8}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:8}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul8, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:8}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:8}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul8, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:9}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:9}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:9}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul9, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:9}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:9}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul9, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:10}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:10}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:10}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul10, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:10}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:10}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul10, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:11}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:11}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:11}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul11, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:11}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:11}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul11, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:12}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:12}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:12}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul12, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:12}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:12}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul12, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:13}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:13}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:13}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul13, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:13}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:13}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul13, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:14}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:14}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:14}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul14, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:14}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:14}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul14, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
record(mbboDirect, "$(SYS){$(D)-DlyGen:15}Mask-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}Mask-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:15}Mask-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Masks")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}

record(mbboDirect, "$(SYS){$(D)-DlyGen:15}EnableGate-Sel") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):Pul15, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  field(VAL , "0")
  field(FLNK, "$(SYS){$(D)-DlyGen:15}EnableGate-RB")
  info(autosaveFields_pass0, "RVAL")
}

record(mbbiDirect, "$(SYS){$(D)-DlyGen:15}EnableGate-RB") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(EVR):Pul15, PROP=Enables")
  field(PINI, "YES")
  field(NOBT, "4")
  info(autosaveFields_pass0, "RVAL")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV0}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV0")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV0}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV0 state")
  field(INP , "@OBJ=$(EVR):FPIn0, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV0}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV0}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV0}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV0}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV0}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV0}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn0, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV0}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV0}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV1}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV1")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV1}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV1 state")
  field(INP , "@OBJ=$(EVR):FPIn1, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV1}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV1}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV1}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV1}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV1}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV1}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn1, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV1}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV1}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV2}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV2")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV2}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV2 state")
  field(INP , "@OBJ=$(EVR):FPIn2, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV2}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV2}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV2}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV2}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV2}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV2}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn2, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV2}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV2}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV3}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV3")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV3}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV3 state")
  field(INP , "@OBJ=$(EVR):FPIn3, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV3}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV3}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV3}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV3}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV3}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV3}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn3, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV3}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV3}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV4}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV4")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV4}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV4 state")
  field(INP , "@OBJ=$(EVR):FPIn4, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV4}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV4}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV4}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV4}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV4}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV4}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn4, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV4}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV4}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV5}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV5")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV5}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV5 state")
  field(INP , "@OBJ=$(EVR):FPIn5, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV5}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV5}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV5}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV5}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV5}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV5}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn5, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV5}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV5}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV6}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV6")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV6}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV6 state")
  field(INP , "@OBJ=$(EVR):FPIn6, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV6}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV6}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV6}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV6}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV6}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV6}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn6, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV6}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV6}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV7}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV7")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV7}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV7 state")
  field(INP , "@OBJ=$(EVR):FPIn7, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV7}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV7}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV7}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV7}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV7}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV7}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn7, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV7}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV7}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV8}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV8")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV8}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV8 state")
  field(INP , "@OBJ=$(EVR):FPIn8, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV8}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV8}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV8}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV8}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV8}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV8}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn8, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV8}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV8}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV9}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV9")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV9}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV9 state")
  field(INP , "@OBJ=$(EVR):FPIn9, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV9}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV9}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV9}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV9}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV9}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV9}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn9, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV9}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV9}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV10}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV10")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV10}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV10 state")
  field(INP , "@OBJ=$(EVR):FPIn10, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV10}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV10}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV10}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV10}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV10}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV10}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn10, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV10}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV10}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV11}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV11")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV11}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV11 state")
  field(INP , "@OBJ=$(EVR):FPIn11, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV11}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV11}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV11}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV11}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV11}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV11}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn11, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV11}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV11}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV12}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV12")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV12}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV12 state")
  field(INP , "@OBJ=$(EVR):FPIn12, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV12}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV12}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV12}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV12}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV12}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV12}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn12, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV12}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV12}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV13}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV13")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV13}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV13 state")
  field(INP , "@OBJ=$(EVR):FPIn13, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV13}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV13}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV13}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV13}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV13}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV13}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn13, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV13}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV13}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV14}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV14")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV14}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV14 state")
  field(INP , "@OBJ=$(EVR):FPIn14, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV14}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV14}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV14}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV14}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV14}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV14}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn14, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV14}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV14}User-SP")
}
# Record set for an EVR's physical input
#
# Macros:
#  IN = record name prefix
#  OBJ = devObj name
#  DESC = Physical label found on output jack

record(bo, "$(SYS){$(D)-In:FPUV15}Lvl-Sel") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "Input In:FPUV15")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=Active Level")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Low")
  field(ONAM, "Active High")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS){$(D)-In:FPUV15}State-I") {
  field(DTYP, "Obj Prop bool")
  field(DESC, "In:FPUV15 state")
  field(INP , "@OBJ=$(EVR):FPIn15, PROP=State")
  field(PINI, "RUNNING")
  field(ZNAM, "Low")
  field(ONAM, "High")
  info(autosaveFields_pass0, "SCAN")
}

record(bo, "$(SYS){$(D)-In:FPUV15}Edge-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=Active Edge")
  field(PINI, "YES")
  field(VAL , "1")
  field(ZNAM, "Active Falling")
  field(ONAM, "Active Rising")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV15}Trig:Ext-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=External Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

# Sets code which will be applied to the local mapping ram whenever the 'External Mode' condition is met.
record(longout, "$(SYS){$(D)-In:FPUV15}Code:Ext-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=External Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

# Sets the code which will be sent on the upstream event link whenever the 'Backwards Mode' condition is met.
record(mbbo, "$(SYS){$(D)-In:FPUV15}Trig:Back-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=Backwards Mode")
  field(PINI, "YES")
  field(ZRST, "Off")
  field(ONST, "Level")
  field(TWST, "Edge")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THSV, "INVALID")
  field(FRSV, "INVALID")
  field(FVSV, "INVALID")
  field(SXSV, "INVALID")
  field(SVSV, "INVALID")
  field(EISV, "INVALID")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS){$(D)-In:FPUV15}Code:Back-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=Backwards Code")
  field(PINI, "YES")
  field(UDF , "0")
  field(LOPR, "0")
  field(HOPR, "255")
  field(DRVL, "0")
  field(DRVH, "255")
  info(autosaveFields_pass0, "VAL")
}

record(mbbo, "$(SYS){$(D)-In:FPUV15}DBus-Sel") {
  field(DTYP, "Obj Prop uint16")
  field(OUT , "@OBJ=$(EVR):FPIn15, PROP=DBus Mask")
  field(PINI, "YES")
  field(VAL,  "8") # Default value: Disable
  field(ZRST, "Bit 0")
  field(ONST, "Bit 1")
  field(TWST, "Bit 2")
  field(THST, "Bit 3")
  field(FRST, "Bit 4")
  field(FVST, "Bit 5")
  field(SXST, "Bit 6")
  field(SVST, "Bit 7")
  field(EIST, "Disabled")
  field(ZRVL, "0x1")
  field(ONVL, "0x2")
  field(TWVL, "0x4")
  field(THVL, "0x8")
  field(FRVL, "0x10")
  field(FVVL, "0x20")
  field(SXVL, "0x40")
  field(SVVL, "0x80")
  field(EIVL, "0x0")
  field(NISV, "INVALID")
  field(TESV, "INVALID")
  field(ELSV, "INVALID")
  field(TVSV, "INVALID")
  field(TTSV, "INVALID")
  field(FTSV, "INVALID")
  field(FFSV, "INVALID")
  field(UNSV, "INVALID")
  field(IVOA, "Don't drive outputs")
  info(autosaveFields_pass0, "VAL")
}


record(waveform, "$(SYS){$(D)-In:FPUV15}Label-I") {
  field(DESC, "Label")
  field(FTVL, "CHAR")
  field(NELM, "128")
  info(autosaveFields_pass1, "VAL")
  alias("$(SYS){$(D)-In:FPUV15}User-SP")
}
